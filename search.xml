<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python| pip下载包太慢的问题</title>
    <url>/2023/02/28/python/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>国内编写python项目需要通过pip去下载对应的依赖,有时候会很慢,可以通过pip配置来修改国内镜像源</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip3 config set install.trusted-host mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>tool |发现一个很不错的vscode插件工具plantUML</title>
    <url>/2023/03/01/tool/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前每次写技术文档需要画图的时候都是通过飞书文档自带的工具或者processon去实现,实现的效果虽然勉强能看但是还是没有达到自己想要的效果,无意中在知乎上看到别人推荐,才是孤陋寡闻,在vscode里有对应的可视化插件plantUML和GraphvizPreview画出来的图是我想要的效果,需要用到对应的语言,准备这几天花点时间去琢磨一下.</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>简单基本使用了一下,可以用下面的代码看看效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Client -&gt; Server: EnterRoom</span><br><span class="line">Server -&gt; DB: GetRoomInfo</span><br><span class="line">DB -&gt; Server: RoomInfo</span><br><span class="line">Server -&gt; Client: success</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<p>琢磨中…</p>
]]></content>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>vim |vim基本配置</title>
    <url>/2023/02/28/vim/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>工作中无论是终端还是IDE都是习惯用vim进行代码编辑, 每次到新公司或者换电脑都得去配置一下, 虽然我基本不用插件,但是一些基本的配置改好之后界面会看着舒服很多.<br>为了怕自己忘记一些基本的配置,这边存一下vim的基本配置, 方便切换电脑的时候能快速把编辑环境配置好.</p>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;set termguicolors  &quot;</span> 打开 <span class="number">24</span> 位真彩色支持                     </span><br><span class="line"><span class="string">&quot;set colorcolumn=80  &quot;</span> 高亮第<span class="number">80</span>列                          </span><br><span class="line"><span class="string">&quot;set relativenumber                    &quot;</span> setting <span class="built_in">line</span> in relative <span class="keyword">mode</span></span><br><span class="line"><span class="comment">&quot;highlight CursorColumn cterm=NONE ctermbg=gray ctermfg=yellow guibg=NONE guifg=NONE </span></span><br><span class="line"><span class="comment">&quot;highlight CursorLine  cterm=NONE ctermbg=gray ctermfg=yellow guibg=NONE guifg=NONE </span></span><br><span class="line"><span class="comment">&quot;set colorcolumn=100                                 </span></span><br><span class="line"><span class="keyword">set</span> cursorcolumn   <span class="comment">&quot; 高亮显示当前列                        </span></span><br><span class="line"><span class="keyword">set</span> cursorline    <span class="comment">&quot; 高亮显示当前行                        </span></span><br><span class="line"><span class="keyword">set</span> ignorecase    <span class="comment">&quot; 搜索的时候忽略大小字字母                   </span></span><br><span class="line"><span class="keyword">set</span> smartcase     <span class="comment">&quot; 若搜索内容中有大写字母，则不再忽略大小写           </span></span><br><span class="line"><span class="keyword">set</span> exrc                         <span class="comment">&quot; exec command in init.vim </span></span><br><span class="line"><span class="keyword">set</span> secure                        <span class="comment">&quot; safely do command above  </span></span><br><span class="line"><span class="keyword">set</span> autochdir                       <span class="comment">&quot; auto change directory   </span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>                        <span class="comment">&quot; setting line       </span></span><br><span class="line"><span class="keyword">set</span> noexpandtab                      <span class="comment">&quot; use only &#x27;\t&#x27; as tab   </span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span>                       <span class="comment">&quot; show how many space for a &#x27;\t&#x27;</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">2</span>                     <span class="comment">&quot; use how many space for &gt;&gt; or &lt;&lt; key</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">2</span>                     <span class="comment">&quot; use how many space when pressing tab</span></span><br><span class="line"><span class="keyword">set</span> autoindent                                    </span><br><span class="line"><span class="keyword">set</span> <span class="keyword">list</span>                         <span class="comment">&quot; show hiding char     </span></span><br><span class="line"><span class="keyword">set</span> listchars=<span class="keyword">tab</span>:\|\ ,trail:·              <span class="comment">&quot; define tab and space show</span></span><br><span class="line"><span class="keyword">set</span> scrolloff=<span class="number">4</span>                      <span class="comment">&quot; least amount line below and above the cursor</span></span><br><span class="line"><span class="keyword">set</span> ttimeoutlen=<span class="number">0</span>                     <span class="comment">&quot; set never wait for key  </span></span><br><span class="line"><span class="keyword">set</span> notimeout                                     </span><br><span class="line"><span class="keyword">set</span> viewoptions=<span class="built_in">cursor</span>,folds,slash,unix          <span class="comment">&quot; remember where to recover cursor</span></span><br><span class="line"><span class="keyword">set</span> wrap                         <span class="comment">&quot; auto line feed      </span></span><br><span class="line"><span class="keyword">set</span> tw=<span class="number">0</span>                         <span class="comment">&quot; text width for automatically wrapping</span></span><br><span class="line"><span class="keyword">set</span> indentexpr=                                                                                                          </span><br><span class="line"><span class="keyword">set</span> splitright                                    </span><br><span class="line"><span class="keyword">set</span> splitbelow                                    </span><br><span class="line"><span class="keyword">set</span> noshowmode                      <span class="comment">&quot; not showing current mode</span></span><br><span class="line"><span class="keyword">set</span> showcmd                        <span class="comment">&quot; show cmd inputing like key combine</span></span><br><span class="line"><span class="keyword">set</span> wildmenu                       <span class="comment">&quot; auto finish vim command  </span></span><br><span class="line"><span class="keyword">set</span> ignorecase                      <span class="comment">&quot; ignore case when searching</span></span><br><span class="line"><span class="keyword">set</span> smartcase                       <span class="comment">&quot; ignore case only on searching</span></span><br><span class="line"><span class="keyword">set</span> shortmess+=<span class="keyword">c</span>                     <span class="comment">&quot; don&#x27;t show useless msg  </span></span><br><span class="line"><span class="keyword">set</span> inccommand=<span class="keyword">split</span>                   <span class="comment">&quot; show substitution automatically</span></span><br><span class="line"><span class="keyword">set</span> completeopt=longest,noinsert,menuone,noselect,preview <span class="comment">&quot; complete opject with a menue</span></span><br><span class="line"><span class="keyword">set</span> ttyfast                        <span class="comment">&quot; make scrolling faster   </span></span><br><span class="line"><span class="keyword">set</span> visualbell                      <span class="comment">&quot; flash screen to notify error</span></span><br><span class="line"><span class="keyword">set</span> updatetime=<span class="number">100</span>                                  </span><br><span class="line"><span class="keyword">set</span> virtualedit=block                                 </span><br><span class="line"><span class="keyword">set</span> lazyredraw                                    </span><br><span class="line"><span class="keyword">set</span> re=<span class="number">0</span>                         <span class="comment">&quot;make increase speed    </span></span><br><span class="line"><span class="comment">&quot; set folding paragraph                                </span></span><br><span class="line"><span class="keyword">set</span> foldmethod=<span class="built_in">indent</span>                                 </span><br><span class="line"><span class="keyword">set</span> <span class="built_in">foldlevel</span>=<span class="number">99</span>                                   </span><br><span class="line"><span class="keyword">set</span> foldenable                                    </span><br><span class="line"><span class="keyword">set</span> formatoptions-=<span class="keyword">tc</span>                                 </span><br><span class="line"><span class="comment">&quot; keep undo or temp file                               </span></span><br><span class="line"><span class="keyword">set</span> hidden                                     </span><br></pre></td></tr></table></figure>

<h2 id="neovim"><a href="#neovim" class="headerlink" title="neovim"></a>neovim</h2><p>不过有时间的话一般都是配置neovim,我的neovim配置仓库是: <a class="link"   href="https://github.com/ribincao/ribin-neovim.git" >https://github.com/ribincao/ribin-neovim.git<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>unity| 实现物体的转动组合</title>
    <url>/2023/03/01/unity/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>策划需要实现一个道具旋转的功能,这个功能如果单纯在unity去实现本身并不是很难,比如有DOTween就可以,但是项目技术架构调整之后,物体的位置数据需要在服务端进行计算,然而服务端还有很多unity相关的基建没有提供支持,比如物理碰撞之类的.<br>所以为了实现需要的效果就需要自己去实现很多位置变化,这里策划的需求主要需要满足以下几点:</p>
<ol>
<li>物体的旋转轴支持配置,目前有三种分别是xyz三个轴</li>
<li>物体旋转到指定的角度后需要停止等待指定的时间</li>
<li>物体在旋转到停止的时候需要抖动一下模拟物理效果</li>
<li>效果参考超级马里奥</li>
</ol>
<img  
                     lazyload
                     alt="image"
                     data-src="/images/rotate_img.png"
                     
                >

<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>整个房子转动主要可以分为两部分，</p>
<ol>
<li>一部分是房子的转动部分，需要支持的配置为房子的转动轴(x|y|z)、转动速度<br>物体绕三个轴的转动目前在逻辑层的实现可以通过调用Transform的Rotate方法去实现<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">entity.transform.Rotate(<span class="keyword">new</span> Vector3(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>), angel, Space.World); <span class="comment">// 绕x轴旋转</span></span><br><span class="line">entity.transform.Rotate(<span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>), angel, Space.World); <span class="comment">// 绕y轴旋转</span></span><br><span class="line">entity.transform.Rotate(<span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>), angel, Space.World); <span class="comment">// 绕z轴旋转</span></span><br></pre></td></tr></table></figure>
旋转速度speed可以通过配置的方式平均到每个tick去计算旋转角angel</li>
<li>另一部分是房子转动状态的切换，房子的转动都是以90度为一个单元进行状态的切换<br>物体的旋转一般都是一个循环，旋转状态可以有三种：正转90度、停止、反转90度，然后按照需求去组合，最终会是一个循环链表，可以在地图重建的时候把这个循环链表一次性构建好用一个list去存储，之后就是按照链表循环去调用不同状态对应的旋转动作。</li>
<li>需要注意的是，每一次旋转停顿会有一个来回的扰动，这个扰动也可以单独抽出来做成一个函数用在每个状态结尾的时候执行，这个扰动可以通过让物体快速的来回旋转1度实现，通过调整度数和速度理论上可以达到效果<br>大概的状态流转如下，具体需要根据需求进行组合调整<img  
                     lazyload
                     alt="image"
                     data-src="/images/rotate_uml.png"
                     
                ></li>
</ol>
<h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>因为在家里的电脑unity跑起来比较费劲,就用python实现了一个伪代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line">DELTA_TIME = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">const = &#123;</span><br><span class="line">    <span class="string">&quot;house&quot;</span>: &#123;<span class="string">&quot;stop_time&quot;</span>: <span class="number">2</span>, <span class="string">&quot;shake_angel&quot;</span>: <span class="number">1</span>, <span class="string">&quot;angel&quot;</span>: <span class="number">90</span>, <span class="string">&quot;cycle_states&quot;</span>: [<span class="number">1</span>, <span class="number">0</span>]&#125;,</span><br><span class="line">    <span class="string">&quot;red&quot;</span>: &#123;<span class="string">&quot;stop_time&quot;</span>: <span class="number">4</span>, <span class="string">&quot;shake_angel&quot;</span>: <span class="number">0</span>, <span class="string">&quot;angel&quot;</span>: <span class="number">180</span>, <span class="string">&quot;cycle_states&quot;</span>: [<span class="number">1</span>, <span class="number">0</span>]&#125;,</span><br><span class="line">    <span class="string">&quot;blue&quot;</span>: &#123;<span class="string">&quot;stop_time&quot;</span>: <span class="number">4</span>, <span class="string">&quot;shake_angel&quot;</span>: <span class="number">0</span>, <span class="string">&quot;angel&quot;</span>: <span class="number">180</span>, <span class="string">&quot;cycle_states&quot;</span>: [<span class="number">0</span>, <span class="number">1</span>]&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, item_id: <span class="built_in">str</span>, speed: <span class="built_in">int</span>, axis: <span class="built_in">int</span></span>):</span><br><span class="line">        self.item_id: <span class="built_in">str</span> = item_id</span><br><span class="line">        self.speed: <span class="built_in">int</span> = speed</span><br><span class="line">        self.axis: <span class="built_in">int</span> = axis</span><br><span class="line"></span><br><span class="line">        self.cur_rotate: <span class="built_in">int</span> = <span class="number">0</span></span><br><span class="line">        self.angel: <span class="built_in">int</span> = <span class="number">90</span></span><br><span class="line">        self.stop_time: <span class="built_in">int</span> = <span class="number">2</span>  <span class="comment"># second</span></span><br><span class="line">        self.cycle_states: <span class="type">List</span>[<span class="built_in">int</span>] = []</span><br><span class="line">        self.cur_state_index: <span class="built_in">int</span> = <span class="number">0</span></span><br><span class="line">        self.cur_stop_time: <span class="built_in">int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.shake_angel: <span class="built_in">int</span> = <span class="number">1</span>  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rebuild</span>(<span class="params">self</span>):</span><br><span class="line">        config = const.get(self.item_id)</span><br><span class="line">        self.angel: <span class="built_in">int</span> = config.get(<span class="string">&quot;angel&quot;</span>, <span class="number">90</span>)</span><br><span class="line">        self.stop_time: <span class="built_in">int</span> = config.get(<span class="string">&quot;stop_time&quot;</span>, <span class="number">2</span>)</span><br><span class="line">        self.shake_angel: <span class="built_in">int</span> = config.get(<span class="string">&quot;shake_angel&quot;</span>, <span class="number">0</span>)</span><br><span class="line">        self.cycle_states: <span class="type">List</span>[<span class="built_in">int</span>] = config.get(<span class="string">&quot;cycle_states&quot;</span>, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">positive_rotate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 正向旋转</span></span><br><span class="line">        tick_angel = (self.angel * DELTA_TIME / self.speed)</span><br><span class="line">        self.cur_rotate += tick_angel</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.cur_rotate % self.angel == <span class="number">0</span>:</span><br><span class="line">            self.cur_state_index = (self.cur_state_index + <span class="number">1</span>) % <span class="built_in">len</span>(self.cycle_states)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;positive rotate <span class="subst">&#123;self.item_id&#125;</span> <span class="subst">&#123;self.cur_rotate&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">negative_rotate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 反向旋转</span></span><br><span class="line">        tick_angel = (self.angel * DELTA_TIME / self.speed)</span><br><span class="line">        self.cur_rotate -= tick_angel</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.cur_rotate % self.angel == <span class="number">0</span>:</span><br><span class="line">            self.cur_state_index = (self.cur_state_index + <span class="number">1</span>) % <span class="built_in">len</span>(self.cycle_states)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;negative rotate <span class="subst">&#123;self.item_id&#125;</span> <span class="subst">&#123;self.cur_rotate&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 停止</span></span><br><span class="line">        self.cur_stop_time += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.cur_stop_time == self.stop_time:</span><br><span class="line">            self.cur_state_index = (self.cur_state_index + <span class="number">1</span>) % <span class="built_in">len</span>(self.cycle_states)</span><br><span class="line">            self.cur_stop_time = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;stop <span class="subst">&#123;self.item_id&#125;</span> <span class="subst">&#123;self.cur_rotate&#125;</span> <span class="subst">&#123;self.cur_stop_time&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 扰动</span></span><br><span class="line">        <span class="keyword">if</span> self.shake_angel == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        state = self.cycle_states[self.cur_state_index]</span><br><span class="line"></span><br><span class="line">        self.shake()</span><br><span class="line">        <span class="keyword">if</span> state == <span class="number">1</span>:</span><br><span class="line">            self.positive_rotate()</span><br><span class="line">        <span class="keyword">elif</span> state == -<span class="number">1</span>:</span><br><span class="line">            self.negative_rotate()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.stop()</span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_test2</span>():</span><br><span class="line">    r = Item(<span class="string">&quot;red&quot;</span>, <span class="number">4</span>, <span class="number">0</span>) <span class="comment"># 红色地板</span></span><br><span class="line">    r.rebuild() <span class="comment"># 场景重建</span></span><br><span class="line">    </span><br><span class="line">    b = Item(<span class="string">&quot;blue&quot;</span>, <span class="number">4</span>, <span class="number">0</span>) <span class="comment"># 蓝色地板</span></span><br><span class="line">    b.rebuild()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r.update()</span><br><span class="line">        b.update()</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        time.sleep(DELTA_TIME) <span class="comment"># 帧率</span></span><br></pre></td></tr></table></figure>

<h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C#实现"></a>C#实现</h2><p>在公司里基于项目的ECS架构测试了一下,大概的测试代码如下,从表现来看达到了想要的效果</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> DELTA = (<span class="number">1000</span> / NetworkDefine.UPDATE_DELTATIME);  <span class="comment">// 1s中多少帧</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> ANGEL = <span class="number">180f</span>;       <span class="comment">//  每次停止前需要旋转的角度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> SPEED = <span class="number">2</span>;          <span class="comment">// 旋转速度 2秒转完 ANGEL</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> STOP_TIME_TICK = <span class="number">1</span> * (<span class="built_in">int</span>)DELTA;  <span class="comment">// 停下的时候等待时间为 1s</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> AXIS = <span class="number">2</span>;     <span class="comment">// 绕轴 0-x,1-y,2-z</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> curStopTick = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> curAngel = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> List&lt;<span class="built_in">int</span>&gt; states = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;() &#123; <span class="number">1</span>, <span class="number">999</span>, <span class="number">0</span>, <span class="number">999</span> &#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> curStateIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> MAX_SHAKE_TIMES = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> curShakeIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> shakeAngel = <span class="number">1.33f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Vector3 <span class="title">GetAxis</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (AXIS == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (AXIS == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Shake</span>(<span class="params">GameLogicEntity entity</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> angel = (ANGEL / (SPEED * DELTA * <span class="number">5</span>));  <span class="comment">// 5是调整系数</span></span><br><span class="line">    <span class="keyword">if</span> (curShakeIndex % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        entity.transform.Rotate(GetAxis(), angel, Space.World);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        entity.transform.Rotate(GetAxis(), -angel, Space.World);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curShakeIndex++;</span><br><span class="line">    <span class="keyword">if</span> (curShakeIndex &gt;= MAX_SHAKE_TIMES)</span><br><span class="line">    &#123;</span><br><span class="line">        curShakeIndex = <span class="number">0</span>;</span><br><span class="line">        curStateIndex = (curStateIndex + <span class="number">1</span>) % states.Count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Positive</span>(<span class="params">GameLogicEntity entity</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> angel = (ANGEL / (SPEED * DELTA));</span><br><span class="line">    curAngel += angel;</span><br><span class="line">    entity.transform.Rotate(GetAxis(), angel, Space.World);</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">int</span>)curAngel % ANGEL &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        curStateIndex = (curStateIndex + <span class="number">1</span>) % states.Count;</span><br><span class="line">        curAngel %= ANGEL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Negative</span>(<span class="params">GameLogicEntity entity</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> angel = (ANGEL / (SPEED * DELTA));</span><br><span class="line">    curAngel += angel;</span><br><span class="line">    entity.transform.Rotate(GetAxis(), -angel, Space.World);</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">int</span>)curAngel % ANGEL &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        curStateIndex = (curStateIndex + <span class="number">1</span>) % states.Count;</span><br><span class="line">        curAngel %= ANGEL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Stop</span>(<span class="params">GameLogicEntity entity</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    curStopTick++;</span><br><span class="line">    <span class="keyword">if</span> (curStopTick == STOP_TIME_TICK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> nextIndex = (curStateIndex + <span class="number">1</span>) % states.Count;</span><br><span class="line">        curStateIndex = nextIndex;</span><br><span class="line">        curStopTick = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> entity <span class="keyword">in</span> <span class="keyword">this</span>.slidePipeGroup)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (entity.slidePipeLogic.mState == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> state = states[curStateIndex];</span><br><span class="line">        <span class="keyword">if</span> (state == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Positive(entity);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Negative(entity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(state == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Stop(entity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Shake(entity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>公司的项目技术架构是基于ECS开发的,这段代码如果要放到unity里去运行还是需要转换一下的,但是整体思路就是把物体的旋转变化用状态机去实现</li>
<li>物体的扰动通过来回旋转一个小角度可以实现</li>
<li>很多时候封装好的组件可以实现我们想要的效果,好处是足够专业,不太方便的是不够灵活,工作中有时间的话,尤其是没有轮子用的时候还是要去了解一些组件的实现用原理尝试着去造一下,也许效果没有那么专业,但至少在造的过程中知道可能出现的问题以及相对应的解决办法,对自己也是一种提升.</li>
</ol>
]]></content>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes| fluent-bit日志采集系统配置</title>
    <url>/2023/02/28/kubernetes/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>排查问题的时候,loghub上的日志是混在一起的,我们希望日志能有一个标签去定位对应的pod,然后通过pod去检索出对应的日志方便我们查看上下文.<br>这个时候就要去集群管理页面上去修改对应的fluent-bit配置就行,我们这里的集群管理用的是rancher,登录rancher选择storage-&gt;ConfigMaps-&gt;fluent-bit-&gt;EditConfig.<br>修改配置如下:</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>custom_parsers.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[PARSER]</span><br><span class="line">    Name docker_no_time</span><br><span class="line">    Format json</span><br><span class="line">    Time_Keep Off</span><br><span class="line">    Time_Key time</span><br><span class="line">    Time_Format %Y-%m-%dT%H:%M:%S.%L</span><br><span class="line"></span><br><span class="line">[PARSER]</span><br><span class="line">    Name                container_firstline</span><br><span class="line">    Format              regex</span><br><span class="line">    Regex               (?&lt;log&gt;(?&lt;=&quot;log&quot;:&quot;)\S(?!\.).*?)(?&lt;!\\)&quot;.*(?&lt;stream&gt;(?&lt;=&quot;stream&quot;:&quot;).*?)&quot;.*(?&lt;time&gt;\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;T\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;\.\w*).*(?=&#125;)</span><br><span class="line">    Time_Key            time</span><br><span class="line">    Time_Format         %Y-%m-%dT%H:%M:%S.%LZ</span><br></pre></td></tr></table></figure>

<p>fluent-bit.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[SERVICE]</span><br><span class="line">    Daemon Off</span><br><span class="line">    Flush 1</span><br><span class="line">    Log_Level info</span><br><span class="line">    Parsers_File parsers.conf</span><br><span class="line">    Parsers_File custom_parsers.conf</span><br><span class="line">    HTTP_Server On</span><br><span class="line">    HTTP_Listen 0.0.0.0</span><br><span class="line">    HTTP_Port 2020</span><br><span class="line">    Health_Check On</span><br><span class="line">    storage.path              /var/fluent-bit/state/flb-storage/</span><br><span class="line">    storage.sync              normal</span><br><span class="line">    storage.checksum          off</span><br><span class="line">    storage.backlog.mem_limit 10M</span><br><span class="line"></span><br><span class="line">[INPUT]</span><br><span class="line">    Name tail</span><br><span class="line">    Path xxxxxxxx.log  # 对应的日志文件</span><br><span class="line">    Tag kube.*</span><br><span class="line">    Docker_Mode         On</span><br><span class="line">    Docker_Mode_Flush   5</span><br><span class="line">    Docker_Mode_Parser  container_firstline</span><br><span class="line">    Parser              docker</span><br><span class="line">    DB                  /var/fluent-bit/state/flb_container.db</span><br><span class="line">    Mem_Buf_Limit       5MB</span><br><span class="line">    Skip_Long_Lines     On</span><br><span class="line">    Refresh_Interval    10</span><br><span class="line">    Rotate_Wait         30</span><br><span class="line">    storage.type        filesystem</span><br><span class="line"></span><br><span class="line">[FILTER]</span><br><span class="line">    Name             kubernetes</span><br><span class="line">    Match            kube.*   # 匹配模式改成kube.*</span><br><span class="line">    Kube_URL         https://kubernetes.default.svc:443</span><br><span class="line">    Kube_CA_File     /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">    Kube_Token_File  /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">    Labels false</span><br><span class="line">    Annotations false</span><br><span class="line"></span><br><span class="line">[Filter]</span><br><span class="line">    Name    nest</span><br><span class="line">    Match    kube.*</span><br><span class="line">    Operation    lift</span><br><span class="line">    Nested_under    kubernetes</span><br><span class="line">    Add_prefix    kubernetes_</span><br><span class="line"></span><br><span class="line">[Filter]</span><br><span class="line">    Name    modify</span><br><span class="line">    Match    kube.*</span><br><span class="line">    Remove    kubernetes_pod_id  # Remove可以移除掉你不关心的参数</span><br><span class="line">    Remove    kubernetes_namespace_name</span><br><span class="line">    Remove    kubernetes_container_hash</span><br><span class="line">    Remove    kubernetes_container_image</span><br><span class="line">    Remove    kubernetes_container_name</span><br><span class="line">    Remove    kubernetes_docker_id</span><br><span class="line"></span><br><span class="line">[OUTPUT]</span><br><span class="line">    Name kinesis_streams</span><br><span class="line">    Match             kube.*</span><br><span class="line">    Region us-west-1	    # aws区域</span><br><span class="line">    Stream LogHub-xxxxxxxx  # loghub配置流</span><br><span class="line">    Retry_Limit False</span><br><span class="line">    time_key time</span><br></pre></td></tr></table></figure>
<p>重启一下fluent-bit就行了.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里调试的过程中发现的一些需要注意的问题:</p>
<ol>
<li>match 要给成 kube.*</li>
</ol>
]]></content>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
</search>
