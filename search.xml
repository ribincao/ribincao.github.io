<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>bug| UnicodeDecodeError: ‘gbk‘ codec can‘t decode byte 0xa4 in position 48: illegal multibyte sequence</title>
    <url>/2023/03/02/bug-UnicodeDecodeError-%E2%80%98gbk%E2%80%98-codec-can%E2%80%98t-decode-byte-0xa4-in-position-48-illegal-multibyte-sequence/</url>
    <content><![CDATA[<p>原因：<br>在用python读取文件，尤其是中文文件的时候会出现这种错误，错误里提示gbk国标的编码不能进行解码，所以可以判断这里是读取器文件是的编码方式无法识别。<br>解决：<br>将源码读取文件的地方添加参数&#96;encoding&#x3D;”utf-8”就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ret = f.readlines()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>go| MIT-6.824 MapReduce实验</title>
    <url>/2023/03/02/go-MapReduce%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h3 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h3><p>阅读论文《MapReduce: Simplified Data Processing on Large Cluster 》。<br>最好准备一个unix环境，本人是在自己的腾讯云服务器上进行的实验，使用的是ubuntu系统，安装好golang，将实验代码拉到本地并命名为6.824(可以自己起别的名字)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git://g.csail.mit.edu/6.824-golabs-2018 6.824</span><br></pre></td></tr></table></figure>
<h3 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><p>本实验是第一个实验lab-1，也就是<code>map_reduce</code>实验，所以这里主要用到的是<code>mapreduce</code>文件夹下的代码。<br>先从<code>test_test.go</code>文件看起，这个文件除了已经编写好的<code>MapFun</code>和<code>ReduceFun</code>函数外，主要是用来最后进行测试的，其中有<code>TestSequentialSingle</code>、<code>TestSequentialMany</code>、<code>TestParallelBasic</code>、<code>TestParallelCheck</code>、<code>TestOneFailure</code>和<code>TestManyFailures</code>六个测试函数，当编写完自己的代码后可以在<code>mapreduce</code>目录下通过如下命令进行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go test -run TestSequentialSingle</span><br></pre></td></tr></table></figure>
<p>或者使用如下命令对代码中以Test开头的函数全部进行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go test</span><br></pre></td></tr></table></figure>
<p>再来看<code>common_map.go</code>和<code>common_reduce.go</code>文件，这两个文件是这次实验的核心，也是本次实验需要编写的文件，如果顺利的话编写完这两个文件就可以测试<code>TestSequentialSingle</code>、<code>TestSequentialMany</code>检查是否成功<br>最后再来看一下<code>schedule.go</code>文件，这个是用来实现并发调度的核心的代码，也是本次实验需要编写的代码。</p>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><ol>
<li><code>common_map.go</code>里的<code>doMap</code>函数增加代码如下<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Your code here (Part I).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	1. 读取文件</span></span><br><span class="line">file, errOpenFile := os.OpenFile(inFile, os.O_RDONLY, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> errOpenFile != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;open file failure &quot;</span>, errOpenFile)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">FileContent, errReadFile := ioutil.ReadAll(file)</span><br><span class="line"><span class="keyword">if</span> errReadFile != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Read file failure &quot;</span>, errReadFile)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//	2. 进行 map 处理</span></span><br><span class="line">ReduceKeyValue := mapF(inFile, <span class="type">string</span>(FileContent))</span><br><span class="line"></span><br><span class="line"><span class="comment">//	3. 根据&lt;job_name, map_id, reduce_id&gt;生成中间文件</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>;i &lt; nReduce;i++ &#123;</span><br><span class="line">	ReduceName := reduceName(jobName, mapTask, i)</span><br><span class="line">	mapOutFile, errOutFile := os.OpenFile(ReduceName, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line">	<span class="keyword">if</span> errOutFile != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(ReduceName, <span class="string">&quot;output file open failure &quot;</span>, errOutFile)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	encoder := json.NewEncoder(mapOutFile)</span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> ReduceKeyValue &#123;</span><br><span class="line">		<span class="keyword">if</span> ihash(value.Key) % nReduce == i &#123;</span><br><span class="line">			err := encoder.Encode(&amp;value)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">&quot;File write failure&quot;</span>, err)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	mapOutFile.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><code>common_reduce.go</code>里的<code>doReduce</code>函数增加代码如下<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Your code here (Part I).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	1. 根据&lt;job_name, map_id, reduce_id&gt;依次读取中间文件塞到reduceData里</span></span><br><span class="line"><span class="keyword">var</span> reduceData []KeyValue</span><br><span class="line"><span class="keyword">var</span> ReduceInputFileName <span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>;i &lt; nMap;i++ &#123;</span><br><span class="line">	ReduceInputFileName = reduceName(jobName, i, reduceTask)</span><br><span class="line">	file, errOpenFile := os.Open(ReduceInputFileName)</span><br><span class="line">	<span class="keyword">if</span> errOpenFile != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Open reduce file failure &quot;</span>, errOpenFile)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	decoder := json.NewDecoder(file)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> v KeyValue</span><br><span class="line">		errDecode := decoder.Decode(&amp;v)</span><br><span class="line">		<span class="keyword">if</span> errDecode != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		reduceData = <span class="built_in">append</span>(reduceData, v)</span><br><span class="line">	&#125;</span><br><span class="line">	file.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//	2. 对 reduceData 进行排序</span></span><br><span class="line"><span class="keyword">var</span> sortReduceData keyValues = reduceData[:]</span><br><span class="line">sort.Sort(sortReduceData)</span><br><span class="line"></span><br><span class="line"><span class="comment">//	3. 把相同的 Key 对应的 value 放一起然后进行 reduce</span></span><br><span class="line">ReduceOutFile, errOutput := os.OpenFile(outFile, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> errOutput != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;output file open failure &quot;</span>, errOutput)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> ReduceOutFile.Close()</span><br><span class="line">encoder := json.NewEncoder(ReduceOutFile)</span><br><span class="line"><span class="keyword">var</span> dataForPerKey []<span class="type">string</span></span><br><span class="line">key := sortReduceData[<span class="number">0</span>].Key</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> sortReduceData &#123;</span><br><span class="line">	<span class="keyword">if</span> value.Key == key &#123;</span><br><span class="line">		dataForPerKey = <span class="built_in">append</span>(dataForPerKey, value.Value)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		out := reduceF(key, dataForPerKey)</span><br><span class="line">		encoder.Encode(KeyValue&#123;key, out&#125;)</span><br><span class="line"></span><br><span class="line">		key = value.Key</span><br><span class="line">		dataForPerKey = dataForPerKey[:<span class="number">0</span>]</span><br><span class="line">		dataForPerKey = <span class="built_in">append</span>(dataForPerKey, value.Key)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//	最后避免漏网之鱼2333</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(dataForPerKey) &gt; <span class="number">0</span> &#123;</span><br><span class="line">	out := reduceF(key, dataForPerKey)</span><br><span class="line">	encoder.Encode(KeyValue&#123;key, out&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
完成这两步代码的编写后就可以进行如下两个串行执行的测试了，在终端输入如下命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go test -run TestSequentialSingle</span><br><span class="line">go test -run TestSequentialMany</span><br></pre></td></tr></table></figure>
不出意外会出现如下结果<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">master: Starting Map/Reduce task test</span><br><span class="line">Merge: read mrtmp.test-res-0</span><br><span class="line">master: Map/Reduce task completed</span><br><span class="line">PASS</span><br><span class="line">ok      _/home/ribincao/Learn/6.824labs/src/mapreduce   1.653s</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">master: Starting Map/Reduce task test</span><br><span class="line">Merge: read mrtmp.test-res-0</span><br><span class="line">Merge: read mrtmp.test-res-1</span><br><span class="line">Merge: read mrtmp.test-res-2</span><br><span class="line">master: Map/Reduce task completed</span><br><span class="line">PASS</span><br><span class="line">ok      _/home/ribincao/Learn/6.824labs/src/mapreduce   2.260s</span><br></pre></td></tr></table></figure></li>
<li>在<code>main</code>目录下的<code>wc.go</code>文件的函数<code>mapF</code>和<code>reduceF</code>中增加代码<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapF</span><span class="params">(filename <span class="type">string</span>, contents <span class="type">string</span>)</span></span> []mapreduce.KeyValue &#123;</span><br><span class="line">	<span class="comment">// Your code here (Part II).</span></span><br><span class="line">	f := <span class="function"><span class="keyword">func</span> <span class="params">(c <span class="type">rune</span>)</span></span> <span class="type">bool</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> !unicode.IsLetter(c)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> temp = strings.FieldsFunc(contents,f)</span><br><span class="line">	<span class="keyword">var</span> ret []mapreduce.KeyValue</span><br><span class="line">	<span class="keyword">for</span> _,value := <span class="keyword">range</span> temp&#123;</span><br><span class="line">		ret = <span class="built_in">append</span>(ret, mapreduce.KeyValue&#123;Key:value,Value:<span class="string">&quot;1&quot;</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reduceF</span><span class="params">(key <span class="type">string</span>, values []<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	<span class="comment">// Your code here (Part II).</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(values) == <span class="number">0</span>&#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;values = 0&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> count <span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> ret <span class="type">string</span></span><br><span class="line">	<span class="keyword">for</span> _,v := <span class="keyword">range</span> values&#123;</span><br><span class="line">		Int,err := strconv.Atoi(v)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;v is not a numbet&quot;</span>,v)</span><br><span class="line">		&#125;</span><br><span class="line">		count += Int</span><br><span class="line">	&#125;</span><br><span class="line">	ret = strconv.Itoa(count)</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><code>schedule.go</code>里的<code>schedule</code>函数增加如下代码<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Your code here (Part III, Part IV).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> threadMaster sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>;i &lt; ntasks;i++ &#123;</span><br><span class="line">	<span class="comment">//	一个 master 并发分配任务给 worker </span></span><br><span class="line">	threadMaster.Add(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(inputFile <span class="type">string</span>, TaskNumber <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			<span class="comment">//	registerChan 相当于一个 worker 队列, worker 出队完成 map 或者 reduce 任务之后入队</span></span><br><span class="line">			rpcAdr := &lt;- registerChan</span><br><span class="line">			ok := call(rpcAdr, <span class="string">&quot;Worker.DoTask&quot;</span>, DoTaskArgs&#123;</span><br><span class="line">				JobName: jobName,</span><br><span class="line">				File:	inputFile,</span><br><span class="line">				Phase: phase,</span><br><span class="line">				TaskNumber: TaskNumber,</span><br><span class="line">				NumOtherPhase: n_other,</span><br><span class="line">			&#125;, <span class="literal">nil</span>)</span><br><span class="line">			<span class="keyword">if</span> ok &#123;</span><br><span class="line">				<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">					<span class="comment">//	完成了就通知当前 worker 可用</span></span><br><span class="line">					registerChan &lt;- rpcAdr</span><br><span class="line">				&#125;()</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		threadMaster.Done()</span><br><span class="line">	&#125;(mapFiles[i], i)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Schedule: %v done\n&quot;</span>, phase)</span><br><span class="line">threadMaster.Wait()</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>最后可以完整的测试一遍，终端运行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go test</span><br></pre></td></tr></table></figure>
<p>成功的话会出现下面的结果(太多只截取部分内容)</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">/var/tmp/824-1001/mr31752-worker2: given reducePhase task #9 on file 824-mrinput-9.txt (nios: 20)</span><br><span class="line">/var/tmp/824-1001/mr31752-worker3: reducePhase task #8 done</span><br><span class="line">/var/tmp/824-1001/mr31752-worker2: reducePhase task #9 done</span><br><span class="line">Master: RPC /var/tmp/824-1001/mr31752-worker1 shutdown error</span><br><span class="line">Master: RPC /var/tmp/824-1001/mr31752-worker0 shutdown error</span><br><span class="line">Merge: read mrtmp.test-res-0</span><br><span class="line">Merge: read mrtmp.test-res-1</span><br><span class="line">Merge: read mrtmp.test-res-2</span><br><span class="line">Merge: read mrtmp.test-res-3</span><br><span class="line">Merge: read mrtmp.test-res-4</span><br><span class="line">Merge: read mrtmp.test-res-5</span><br><span class="line">Merge: read mrtmp.test-res-6</span><br><span class="line">Merge: read mrtmp.test-res-7</span><br><span class="line">Merge: read mrtmp.test-res-8</span><br><span class="line">Merge: read mrtmp.test-res-9</span><br><span class="line">/var/tmp/824-1001/mr31752-master: Map/Reduce task completed</span><br><span class="line">PASS</span><br><span class="line">ok      _/home/ribincao/Learn/6.824labs/src/mapreduce   11.113s</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>golang</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes| 查看pod日志</title>
    <url>/2023/03/01/kubernetes-%E6%9F%A5%E7%9C%8Bpod%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前在线上出现一个奇怪的问题,容器总是莫名奇妙的崩溃找不到原因.为了排查问题需要去查询日志,loghub上的日志时序看着很奇怪,不太方便查看上下文去排查.所以就想着去开一个pod动态看日志直到pod崩溃就比较方便了.</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>本地动态查看pod日志需要先切到对应的vpc,先查看pod信息获取podid以及对应的容器id</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pods -o wide</span><br><span class="line"></span><br><span class="line">kubectl logs &lt;pod_id&gt; -c &lt;container_id&gt;</span><br><span class="line">kubectl logs --follow &lt;pod_id&gt; -c &lt;container_id&gt;</span><br></pre></td></tr></table></figure>
<p>当然也可以加上<code>-n</code>命令去带上namespace</p>
]]></content>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes| fluent-bit日志采集系统配置</title>
    <url>/2023/02/28/kubernetes/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>排查问题的时候,loghub上的日志是混在一起的,我们希望日志能有一个标签去定位对应的pod,然后通过pod去检索出对应的日志方便我们查看上下文.<br>这个时候就要去集群管理页面上去修改对应的fluent-bit配置就行,我们这里的集群管理用的是rancher,登录rancher选择storage-&gt;ConfigMaps-&gt;fluent-bit-&gt;EditConfig.<br>修改配置如下:</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>custom_parsers.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[PARSER]</span><br><span class="line">    Name docker_no_time</span><br><span class="line">    Format json</span><br><span class="line">    Time_Keep Off</span><br><span class="line">    Time_Key time</span><br><span class="line">    Time_Format %Y-%m-%dT%H:%M:%S.%L</span><br><span class="line"></span><br><span class="line">[PARSER]</span><br><span class="line">    Name                container_firstline</span><br><span class="line">    Format              regex</span><br><span class="line">    Regex               (?&lt;log&gt;(?&lt;=&quot;log&quot;:&quot;)\S(?!\.).*?)(?&lt;!\\)&quot;.*(?&lt;stream&gt;(?&lt;=&quot;stream&quot;:&quot;).*?)&quot;.*(?&lt;time&gt;\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;T\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;\.\w*).*(?=&#125;)</span><br><span class="line">    Time_Key            time</span><br><span class="line">    Time_Format         %Y-%m-%dT%H:%M:%S.%LZ</span><br></pre></td></tr></table></figure>

<p>fluent-bit.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[SERVICE]</span><br><span class="line">    Daemon Off</span><br><span class="line">    Flush 1</span><br><span class="line">    Log_Level info</span><br><span class="line">    Parsers_File parsers.conf</span><br><span class="line">    Parsers_File custom_parsers.conf</span><br><span class="line">    HTTP_Server On</span><br><span class="line">    HTTP_Listen 0.0.0.0</span><br><span class="line">    HTTP_Port 2020</span><br><span class="line">    Health_Check On</span><br><span class="line">    storage.path              /var/fluent-bit/state/flb-storage/</span><br><span class="line">    storage.sync              normal</span><br><span class="line">    storage.checksum          off</span><br><span class="line">    storage.backlog.mem_limit 10M</span><br><span class="line"></span><br><span class="line">[INPUT]</span><br><span class="line">    Name tail</span><br><span class="line">    Path xxxxxxxx.log  # 对应的日志文件</span><br><span class="line">    Tag kube.*</span><br><span class="line">    Docker_Mode         On</span><br><span class="line">    Docker_Mode_Flush   5</span><br><span class="line">    Docker_Mode_Parser  container_firstline</span><br><span class="line">    Parser              docker</span><br><span class="line">    DB                  /var/fluent-bit/state/flb_container.db</span><br><span class="line">    Mem_Buf_Limit       5MB</span><br><span class="line">    Skip_Long_Lines     On</span><br><span class="line">    Refresh_Interval    10</span><br><span class="line">    Rotate_Wait         30</span><br><span class="line">    storage.type        filesystem</span><br><span class="line"></span><br><span class="line">[FILTER]</span><br><span class="line">    Name             kubernetes</span><br><span class="line">    Match            kube.*   # 匹配模式改成kube.*</span><br><span class="line">    Kube_URL         https://kubernetes.default.svc:443</span><br><span class="line">    Kube_CA_File     /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">    Kube_Token_File  /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">    Labels false</span><br><span class="line">    Annotations false</span><br><span class="line"></span><br><span class="line">[Filter]</span><br><span class="line">    Name    nest</span><br><span class="line">    Match    kube.*</span><br><span class="line">    Operation    lift</span><br><span class="line">    Nested_under    kubernetes</span><br><span class="line">    Add_prefix    kubernetes_</span><br><span class="line"></span><br><span class="line">[Filter]</span><br><span class="line">    Name    modify</span><br><span class="line">    Match    kube.*</span><br><span class="line">    Remove    kubernetes_pod_id  # Remove可以移除掉你不关心的参数</span><br><span class="line">    Remove    kubernetes_namespace_name</span><br><span class="line">    Remove    kubernetes_container_hash</span><br><span class="line">    Remove    kubernetes_container_image</span><br><span class="line">    Remove    kubernetes_container_name</span><br><span class="line">    Remove    kubernetes_docker_id</span><br><span class="line"></span><br><span class="line">[OUTPUT]</span><br><span class="line">    Name kinesis_streams</span><br><span class="line">    Match             kube.*</span><br><span class="line">    Region us-west-1	    # aws区域</span><br><span class="line">    Stream LogHub-xxxxxxxx  # loghub配置流</span><br><span class="line">    Retry_Limit False</span><br><span class="line">    time_key time</span><br></pre></td></tr></table></figure>
<p>重启一下fluent-bit就行了.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里调试的过程中发现的一些需要注意的问题:</p>
<ol>
<li>match 要给成 kube.*</li>
</ol>
]]></content>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>latex| 论文下方添加copyright</title>
    <url>/2023/03/02/latex-%E8%AE%BA%E6%96%87%E4%B8%8B%E6%96%B9%E6%B7%BB%E5%8A%A0copyright/</url>
    <content><![CDATA[<p>在\begin{document}上方添加如下代码</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\IEEEoverridecommandlockouts</span></span><br><span class="line"><span class="keyword">\IEEEpubid</span>&#123;<span class="keyword">\makebox</span>[<span class="keyword">\columnwidth</span>]&#123;978-1-4799-3083-8/14/<span class="keyword">\$</span>31.00~<span class="keyword">\copyright</span>~2014 IEEE <span class="keyword">\hfill</span>&#125; <span class="keyword">\hspace</span>&#123;<span class="keyword">\columnsep</span>&#125;<span class="keyword">\makebox</span>[<span class="keyword">\columnwidth</span>]&#123; &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>如图：<br><img  
                     lazyload
                     alt="image"
                     data-src="/images/latex_copyright.png"
                     
                ></p>
]]></content>
      <tags>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql| 添加新用户</title>
    <url>/2023/03/02/mysql-%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--	1. 用户名为ribincao ，&#x27;%&#x27;表示所有 ip 都可访问，&#x27;123456&#x27;为密码</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;ribincao&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--	2. 授予用户权限, 否则操作会报 command denied  错误</span></span><br><span class="line"><span class="keyword">grant</span> usage <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;zc&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">delete</span>,<span class="keyword">create</span>,<span class="keyword">drop</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;ribincao&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>python| LRU的实现</title>
    <url>/2023/03/02/python-LRU%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>前几天看到同事在写服务器框架的时候其中有一部分在用C#实现一个LRU算法，当时脑子一蒙忽然忘记LRU的具体实现原理，赶紧翻书回忆了一下LRU然后用python去实现了一个LRU来加深记忆。<br>LRU(Least Recently Used)指的是最近最少使用，核心就是当要淘汰数据的时候选择最久没有使用的数据。仔细想想，我这里准备用一个双向链表来存储数据的访问记录，链表的头节点是最近一次访问的数据，链表的尾节点是最远一次访问的数据，同时给节点设置一个节点数上限来限制数据的存储大小，当访问的数据大于上限的时候从淘汰尾结点的访问记录。为了快速确定访问数据存储的节点，我们需要一个hash表来记录数据的键与节点的映射。下面就开始来实现。</p>
<h2 id="一、设计思路"><a href="#一、设计思路" class="headerlink" title="一、设计思路"></a>一、设计思路</h2><p>  先实现一个Node类，类中存储了数据的信息(键&#x2F;值)以及两个分别指向前向和后向节点的指针</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key: <span class="built_in">str</span>, value: <span class="built_in">object</span></span>):</span><br><span class="line">        self.key: <span class="built_in">str</span> = key</span><br><span class="line">        self.value: <span class="built_in">object</span> = value</span><br><span class="line">        self.prev: <span class="type">Optional</span>[Node] = <span class="literal">None</span></span><br><span class="line">        self.post: <span class="type">Optional</span>[Node] = <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p>然后就是实现一个双向链表，链表的数据成员有头结点指针head和尾结点tail以及链表的长度，方法成员有三个，分别是头部增加节点、尾部移除节点以及移除指定的节点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleLink</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.head: <span class="type">Optional</span>[Node] = <span class="literal">None</span></span><br><span class="line">        self.tail: <span class="type">Optional</span>[Node] = <span class="literal">None</span></span><br><span class="line">        self.length: <span class="built_in">int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append_front</span>(<span class="params">self, node: Node</span>):</span><br><span class="line">        <span class="comment"># type: (Node) -&gt; <span class="literal">None</span></span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 链表头部添加一个节点 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, node: Node</span>):</span><br><span class="line">        <span class="comment"># type: (Node) -&gt; Node</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 从链表中移除指定的节点, 返回被移除的节点 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop_back</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># type: () -&gt; Node | <span class="literal">None</span></span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 从链表中弹出尾部的节点, 返回移除的节点(可能为空)&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>实现LRU类，对于用户来说，LRU只有一个set接口负责把访问记录添加到链表中，另一个是get接口负责从链表中获取之前的访问记录。LRU类另外还有三个数据成员，分别是容量、节点的映射关系表以及刚才定义的双向链表实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Lru</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, capacity=<span class="number">1024</span></span>):</span><br><span class="line">        self.capacity: <span class="built_in">int</span> = capacity</span><br><span class="line">        self.keys: <span class="type">Dict</span>[<span class="built_in">str</span>, Node] = <span class="built_in">dict</span>()</span><br><span class="line">        self.link: DoubleLink = DoubleLink()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, key: <span class="built_in">str</span>, value: <span class="built_in">object</span></span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="二、具体实现和测试结果"><a href="#二、具体实现和测试结果" class="headerlink" title="二、具体实现和测试结果"></a>二、具体实现和测试结果</h2><p>最后，开始实现每个函数的具体功能就OK了，最终的完整代码文件如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key: <span class="built_in">str</span>, value: <span class="built_in">object</span></span>):</span><br><span class="line">        self.key: <span class="built_in">str</span> = key</span><br><span class="line">        self.value: <span class="built_in">object</span> = value</span><br><span class="line">        self.prev: <span class="type">Optional</span>[Node] = <span class="literal">None</span></span><br><span class="line">        self.post: <span class="type">Optional</span>[Node] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleLink</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.head: <span class="type">Optional</span>[Node] = <span class="literal">None</span></span><br><span class="line">        self.tail: <span class="type">Optional</span>[Node] = <span class="literal">None</span></span><br><span class="line">        self.length: <span class="built_in">int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append_front</span>(<span class="params">self, node: Node</span>):</span><br><span class="line">        <span class="comment"># type: (Node) -&gt; <span class="literal">None</span></span></span><br><span class="line">        <span class="keyword">if</span> self.length &lt;= <span class="number">0</span>:</span><br><span class="line">            node.prev = <span class="literal">None</span></span><br><span class="line">            node.post = <span class="literal">None</span></span><br><span class="line">            self.head = node</span><br><span class="line">            self.tail = node</span><br><span class="line">            self.length += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        old_head = self.head</span><br><span class="line">        node.prev = <span class="literal">None</span></span><br><span class="line">        node.post = old_head</span><br><span class="line">        <span class="keyword">if</span> old_head:</span><br><span class="line">            old_head.prev = node</span><br><span class="line">        self.head = node</span><br><span class="line">        self.length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, node: Node</span>):</span><br><span class="line">        <span class="comment"># type: (Node) -&gt; Node</span></span><br><span class="line">        prev = node.prev</span><br><span class="line">        post = node.post</span><br><span class="line">        <span class="keyword">if</span> node == self.head:</span><br><span class="line">            self.head = post</span><br><span class="line">        <span class="keyword">if</span> node == self.tail:</span><br><span class="line">            self.tail = prev</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> prev:</span><br><span class="line">            prev.post = post</span><br><span class="line">        <span class="keyword">if</span> post:</span><br><span class="line">            post.prev = prev</span><br><span class="line">        </span><br><span class="line">        node.prev = <span class="literal">None</span></span><br><span class="line">        node.post = <span class="literal">None</span></span><br><span class="line">        self.length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop_back</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># type: () -&gt; Node | <span class="literal">None</span></span></span><br><span class="line">        tail = self.tail</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tail:</span><br><span class="line">            <span class="keyword">return</span> tail</span><br><span class="line">        prev_tail = tail.prev</span><br><span class="line">        self.tail = prev_tail</span><br><span class="line">        self.length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> prev_tail:</span><br><span class="line">            prev_tail.post = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> tail</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.length &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        head = self.head</span><br><span class="line">        nodes = []</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            s = <span class="string">&quot;(%s: %s)&quot;</span> % (head.key, head.value)</span><br><span class="line">            nodes.append(s)</span><br><span class="line">            head = head.post</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; -&gt; &quot;</span>.join(nodes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lru</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, capacity=<span class="number">1024</span></span>):</span><br><span class="line">        self.capacity: <span class="built_in">int</span> = capacity</span><br><span class="line">        self.keys: <span class="type">Dict</span>[<span class="built_in">str</span>, Node] = <span class="built_in">dict</span>()</span><br><span class="line">        self.link: DoubleLink = DoubleLink()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, key: <span class="built_in">str</span>, value: <span class="built_in">object</span></span>):</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.keys:</span><br><span class="line">            node = self.keys[key]</span><br><span class="line">            node.value = value</span><br><span class="line">            r_node = self.link.remove(node)</span><br><span class="line">            self.link.append_front(r_node)</span><br><span class="line">            <span class="built_in">print</span>(self.link.length, self.link)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.link.length &gt;= self.capacity:</span><br><span class="line">            p_node = self.link.pop_back()</span><br><span class="line">            <span class="keyword">if</span> p_node:</span><br><span class="line">                <span class="keyword">del</span> self.keys[p_node.key]</span><br><span class="line">                <span class="keyword">del</span> p_node</span><br><span class="line">        </span><br><span class="line">        node = Node(key, value)</span><br><span class="line">        self.keys[key] = node</span><br><span class="line">        self.link.append_front(node)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;length: &quot;</span>, self.link.length, <span class="string">&quot;, link:&quot;</span>, self.link)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.keys:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        node = self.keys[key]</span><br><span class="line">        r_node = self.link.remove(node)</span><br><span class="line">        self.link.append_front(r_node)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[GET] %s: %s&quot;</span> % (key, node.value))</span><br><span class="line">        <span class="keyword">return</span> node.value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    lru = Lru(<span class="number">3</span>)</span><br><span class="line">    lru.<span class="built_in">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ribincao&quot;</span>)</span><br><span class="line">    lru.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    lru.<span class="built_in">set</span>(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;27&quot;</span>)</span><br><span class="line">    lru.get(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">    lru.<span class="built_in">set</span>(<span class="string">&quot;education&quot;</span>, <span class="string">&quot;master&quot;</span>)</span><br><span class="line">    lru.get(<span class="string">&quot;education&quot;</span>)</span><br><span class="line">    lru.<span class="built_in">set</span>(<span class="string">&quot;occupation&quot;</span>, <span class="string">&quot;全菜工程师&quot;</span>)</span><br><span class="line">    lru.<span class="built_in">set</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    lru.<span class="built_in">set</span>(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;b&quot;</span>)</span><br><span class="line">    lru.<span class="built_in">set</span>(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>在这里分享了自己的设计思路和实现过程，代码如若发现bug欢迎随时提出改正，peace!!!</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>python| floyd算法计算最短路径</title>
    <url>/2023/03/02/python-floyd%E7%AE%97%E6%B3%95%E8%AE%A1%E7%AE%97%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@author: 热心市民吴彦祖</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#定义一个比较大的值</span></span><br><span class="line">MAX = <span class="number">99999</span></span><br><span class="line"><span class="comment">#邻接矩阵</span></span><br><span class="line">graph = [[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, MAX, MAX],</span><br><span class="line">          [MAX, <span class="number">0</span>, MAX, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">          [<span class="number">1</span>, MAX, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">          [MAX, MAX, <span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>],</span><br><span class="line">          [MAX, MAX, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="comment">#生成路径矩阵</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createPathMatrix</span>(<span class="params">SIZE</span>):</span><br><span class="line">    PathMatrix = []</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(SIZE):</span><br><span class="line">        P = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(SIZE):</span><br><span class="line">            P.append(<span class="built_in">list</span>(tmp))</span><br><span class="line">        PathMatrix.append(<span class="built_in">list</span>(P))</span><br><span class="line">    <span class="keyword">return</span> PathMatrix</span><br><span class="line"><span class="comment">#基于Floyd算法生成最短路径矩阵</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Floyd</span>(<span class="params">Matrix, PathMatrix</span>):</span><br><span class="line">    SIZE = <span class="built_in">len</span>(Matrix)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(SIZE):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(SIZE):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(SIZE):</span><br><span class="line">                <span class="keyword">if</span> (i == j) <span class="keyword">or</span> (j == k) <span class="keyword">or</span> (i == k):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                s = Matrix[i][k] + Matrix[k][j]</span><br><span class="line">                <span class="keyword">if</span> s &lt; Matrix[i][j]:</span><br><span class="line">                    Matrix[i][j] = s</span><br><span class="line">                    PathMatrix[i][j].append(k)<span class="comment">#将经过的节点存入列表</span></span><br><span class="line">    <span class="keyword">return</span> Matrix, PathMatrix</span><br><span class="line"><span class="comment">#利用递归生成最短路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">searchPath</span>(<span class="params">start, target, pathMatrix</span>):</span><br><span class="line">    mid = pathMatrix[start][target]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(mid) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">return</span> searchPath(start, mid[-<span class="number">1</span>], pathMatrix) + [mid[-<span class="number">1</span>]] + searchPath(mid[-<span class="number">1</span>], target, pathMatrix)</span><br><span class="line"></span><br><span class="line">pathMatrix = createPathMatrix(<span class="built_in">len</span>(graph))<span class="comment">#生成路径矩阵</span></span><br><span class="line">Matrix, pathMatrix = Floyd(graph, pathMatrix)<span class="comment">#计算最短路径并更新路径矩阵</span></span><br><span class="line">start = <span class="number">0</span><span class="comment">#出发节点</span></span><br><span class="line">target = <span class="number">4</span><span class="comment">#终点节点</span></span><br><span class="line">path = searchPath(start, target, pathMatrix)<span class="comment">#搜索中间路径</span></span><br><span class="line">output = [start] + path + [target]<span class="comment">#生成完整路径</span></span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>python| pip下载包太慢的问题</title>
    <url>/2023/02/28/python-pip%E6%9B%B4%E6%96%B0%E5%8C%85%E5%A4%AA%E6%85%A2/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>国内编写python项目需要通过pip去下载对应的依赖,有时候会很慢,可以通过pip配置来修改国内镜像源</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip3 config set install.trusted-host mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python| 一个简单的区块链demo</title>
    <url>/2023/03/02/python-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8C%BA%E5%9D%97%E9%93%BEdemo/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Optional</span>, <span class="type">Dict</span>, <span class="type">Union</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, request</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Transaction</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, sender: <span class="built_in">str</span>, recipient: <span class="built_in">str</span>, amount: <span class="built_in">float</span></span>):</span><br><span class="line">        self.sender: <span class="built_in">str</span> = sender</span><br><span class="line">        self.recipient: <span class="built_in">str</span> = recipient</span><br><span class="line">        self.amount: <span class="built_in">float</span> = amount</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_dict</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__dict__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, index: <span class="built_in">int</span>, timestamp: <span class="built_in">float</span>, proof: <span class="built_in">int</span>, previous_hash: <span class="built_in">str</span>, transactions: <span class="type">List</span>[Transaction]</span>):</span><br><span class="line">        self.index: <span class="built_in">int</span> = index</span><br><span class="line">        self.timestamp: <span class="built_in">float</span> = timestamp</span><br><span class="line">        self.proof: <span class="built_in">int</span> = proof</span><br><span class="line">        self.previous_hash: <span class="built_in">str</span> = previous_hash</span><br><span class="line">        self.transactions: <span class="type">List</span>[Transaction] = transactions</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_dict</span>(<span class="params">self</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">object</span>]:</span><br><span class="line">        ret = <span class="built_in">dict</span>(self.__dict__)</span><br><span class="line">        _t = []</span><br><span class="line">        <span class="keyword">for</span> transaction <span class="keyword">in</span> self.transactions:</span><br><span class="line">            _t.append(transaction.to_dict())</span><br><span class="line">        ret[<span class="string">&quot;transactions&quot;</span>] = _t</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlockChain</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, proof: <span class="built_in">int</span></span>):</span><br><span class="line">        self.chains: <span class="type">List</span>[Block] = <span class="built_in">list</span>()</span><br><span class="line">        self.current_transactions: <span class="type">List</span>[Transaction] = []</span><br><span class="line">        self.new_block(proof=proof, pre_hash=<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">new_block</span>(<span class="params">self, proof: <span class="built_in">int</span>, pre_hash: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span>) -&gt; Block:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pre_hash:</span><br><span class="line">            pre_hash = self.<span class="built_in">hash</span>(self.last_block)</span><br><span class="line">        block = Block(index=<span class="built_in">len</span>(self.chains) + <span class="number">1</span>,</span><br><span class="line">                      timestamp=time.time(),</span><br><span class="line">                      proof=proof,</span><br><span class="line">                      previous_hash=pre_hash,</span><br><span class="line">                      transactions=self.current_transactions)</span><br><span class="line">        self.current_transactions = []</span><br><span class="line">        self.chains.append(block)</span><br><span class="line">        <span class="keyword">return</span> block</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">new_transaction</span>(<span class="params">self, sender: <span class="built_in">str</span>, recipient: <span class="built_in">str</span>, amount: <span class="built_in">float</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        transaction = Transaction(sender, recipient, amount)</span><br><span class="line">        self.current_transactions.append(transaction)</span><br><span class="line">        <span class="keyword">return</span> self.last_block.index + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">last_block</span>(<span class="params">self</span>) -&gt; Block:</span><br><span class="line">        <span class="keyword">return</span> self.chains[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">cls, block: Block</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        block_string = json.dumps(block.to_dict(), sort_keys=<span class="literal">True</span>).encode()</span><br><span class="line">        <span class="keyword">return</span> hashlib.sha256(block_string).hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self, last_proof: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        proof = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.valid_proof(last_proof, proof):</span><br><span class="line">            proof += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> proof</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">valid_proof</span>(<span class="params">cls, last_proof, proof</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        guess = <span class="string">f&quot;<span class="subst">&#123;last_proof&#125;</span><span class="subst">&#123;proof&#125;</span>&quot;</span>.encode()</span><br><span class="line">        guess_hash = hashlib.sha256(guess).hexdigest()</span><br><span class="line">        <span class="keyword">return</span> guess_hash[:<span class="number">4</span>] == <span class="string">&quot;0000&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">node_identifier = <span class="built_in">str</span>(uuid4()).replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">block_chain = BlockChain(proof=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/mine&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mine</span>():</span><br><span class="line">    last_block = block_chain.last_block</span><br><span class="line">    last_proof = last_block.proof</span><br><span class="line">    proof = block_chain.proof_of_work(last_proof)</span><br><span class="line"></span><br><span class="line">    block_chain.new_transaction(sender=<span class="string">&quot;0&quot;</span>, recipient=node_identifier, amount=<span class="number">1</span>)</span><br><span class="line">    pre_hash = block_chain.<span class="built_in">hash</span>(last_block)</span><br><span class="line">    block = block_chain.new_block(proof, pre_hash)</span><br><span class="line">    response = block.to_dict()</span><br><span class="line">    response[<span class="string">&quot;message&quot;</span>] = <span class="string">&quot;new block forged&quot;</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(response), <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/transactions/new&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_transaction</span>():</span><br><span class="line">    req: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>] = request.get_json()</span><br><span class="line">    requires = [<span class="string">&quot;sender&quot;</span>, <span class="string">&quot;recipient&quot;</span>, <span class="string">&quot;amount&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>(param <span class="keyword">in</span> requires <span class="keyword">for</span> param <span class="keyword">in</span> req):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;missing param&quot;</span>, <span class="number">400</span></span><br><span class="line">    index = block_chain.new_transaction(req[<span class="string">&quot;sender&quot;</span>], req[<span class="string">&quot;recipient&quot;</span>], <span class="built_in">float</span>(req[<span class="string">&quot;amount&quot;</span>]))</span><br><span class="line">    response = &#123;<span class="string">&quot;message&quot;</span>: <span class="string">f&quot;transaction will be add to block <span class="subst">&#123;index&#125;</span>&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(response), <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/chain&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">full_chain</span>():</span><br><span class="line">    chains = []</span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> block_chain.chains:</span><br><span class="line">        chains.append(block.to_dict())</span><br><span class="line">    response = &#123;</span><br><span class="line">        <span class="string">&quot;chain:&quot;</span>: chains,</span><br><span class="line">        <span class="string">&quot;length&quot;</span>: <span class="built_in">len</span>(chains)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(response), <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>python| 哲学家就餐问题</title>
    <url>/2023/03/02/python-%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>哲学家就餐问题是一个很经典的问题，leetcode上的第1226题<code>https://leetcode-cn.com/problems/the-dining-philosophers/</code>有用例可以跑，针对这道题通过python用三种方法实现。</p>
<h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>最简单暴力的方法，串行解决：设置一个锁确保每个时刻只有一个哲学家在就餐。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DiningPhilosophers</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.lock = Lock()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># call the functions directly to execute, for example, eat()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wantsToEat</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                   philosopher: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                   pickLeftFork: <span class="string">&#x27;Callable[[], None]&#x27;</span>,</span></span><br><span class="line"><span class="params">                   pickRightFork: <span class="string">&#x27;Callable[[], None]&#x27;</span>,</span></span><br><span class="line"><span class="params">                   eat: <span class="string">&#x27;Callable[[], None]&#x27;</span>,</span></span><br><span class="line"><span class="params">                   putLeftFork: <span class="string">&#x27;Callable[[], None]&#x27;</span>,</span></span><br><span class="line"><span class="params">                   putRightFork: <span class="string">&#x27;Callable[[], None]&#x27;</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">        self.lock.acquire()</span><br><span class="line">        <span class="comment">#  判断是否加锁成功</span></span><br><span class="line">        <span class="keyword">if</span> self.lock.locked():</span><br><span class="line">            pickLeftFork()</span><br><span class="line">            pickRightFork()</span><br><span class="line">            eat()</span><br><span class="line">            putLeftFork()</span><br><span class="line">            putRightFork()</span><br><span class="line">            <span class="keyword">while</span> self.lock.locked():</span><br><span class="line">                self.lock.release()</span><br></pre></td></tr></table></figure>
<h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>每个哲学家都先拿左边的餐具再拿右边的餐具进行就餐，每个餐具都设置一个锁，加入就餐的哲学家编号为<code>i</code>，则他左边和右边的餐具编号设定为<code>i</code>和<code>(i + 1) % n</code>。为了避免出现死锁所以需要一个信号量去限定最多只有<code>n-1</code>个人去拿餐具就餐(本题中<code>n=5</code>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock, Semaphore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DiningPhilosophers</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.sem = Semaphore(<span class="number">4</span>)</span><br><span class="line">        self.locks = [Lock() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># call the functions directly to execute, for example, eat()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wantsToEat</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                   philosopher: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                   pickLeftFork: <span class="string">&#x27;Callable[[], None]&#x27;</span>,</span></span><br><span class="line"><span class="params">                   pickRightFork: <span class="string">&#x27;Callable[[], None]&#x27;</span>,</span></span><br><span class="line"><span class="params">                   eat: <span class="string">&#x27;Callable[[], None]&#x27;</span>,</span></span><br><span class="line"><span class="params">                   putLeftFork: <span class="string">&#x27;Callable[[], None]&#x27;</span>,</span></span><br><span class="line"><span class="params">                   putRightFork: <span class="string">&#x27;Callable[[], None]&#x27;</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.sem.acquire()</span><br><span class="line">        left_fork, right_fork = philosopher, (philosopher + <span class="number">1</span>) % <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        self.locks[left_fork].acquire()</span><br><span class="line">        self.locks[right_fork].acquire()</span><br><span class="line"></span><br><span class="line">        pickLeftFork()</span><br><span class="line">        pickRightFork()</span><br><span class="line">        eat()</span><br><span class="line">        putLeftFork()</span><br><span class="line">        putRightFork()</span><br><span class="line"></span><br><span class="line">        self.locks[left_fork].release()</span><br><span class="line">        self.locks[right_fork].release()</span><br><span class="line">        self.sem.release()</span><br></pre></td></tr></table></figure>
<h3 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a>第三种方法</h3><p>和第二种方法类似，不过是让奇数号的哲学家先抢左边的餐具再抢右边的餐具，而偶数号的哲学家相反，先抢右边的餐具再抢左边的餐具，这样就可以不用限定准备就餐的人数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DiningPhilosophers</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.locks = [Lock() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># call the functions directly to execute, for example, eat()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wantsToEat</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                   philosopher: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">                   pickLeftFork: <span class="string">&#x27;Callable[[], None]&#x27;</span>,</span></span><br><span class="line"><span class="params">                   pickRightFork: <span class="string">&#x27;Callable[[], None]&#x27;</span>,</span></span><br><span class="line"><span class="params">                   eat: <span class="string">&#x27;Callable[[], None]&#x27;</span>,</span></span><br><span class="line"><span class="params">                   putLeftFork: <span class="string">&#x27;Callable[[], None]&#x27;</span>,</span></span><br><span class="line"><span class="params">                   putRightFork: <span class="string">&#x27;Callable[[], None]&#x27;</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        left_fork, right_fork = philosopher, (philosopher + <span class="number">1</span>) % <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> philosopher % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            self.locks[right_fork].acquire()</span><br><span class="line">            self.locks[left_fork].acquire()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.locks[left_fork].acquire()</span><br><span class="line">            self.locks[right_fork].acquire()</span><br><span class="line"></span><br><span class="line">        pickLeftFork()</span><br><span class="line">        pickRightFork()</span><br><span class="line">        eat()</span><br><span class="line">        putLeftFork()</span><br><span class="line">        putRightFork()</span><br><span class="line"></span><br><span class="line">        self.locks[left_fork].release()</span><br><span class="line">        self.locks[right_fork].release()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>python| 基于json的RPC实现</title>
    <url>/2023/03/02/python-%E5%9F%BA%E4%BA%8Ejson%E7%9A%84RPC%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="背景和实现原理"><a href="#背景和实现原理" class="headerlink" title="背景和实现原理"></a>背景和实现原理</h3><p>最近在看RPC相关的东西就想着实现一个RPC，看了一些别人写的并且特意去看了一下python标注库xmlrpc里的实现源码，就参考源码写了一个简单版的。简单说一下代码结构，代码主要有两个文件<code>client.py</code>和<code>server.py</code>两个文件：</p>
<ul>
<li>其中客户端是实现了一个<code>ServerProxy</code>类，这个类主要提供<code>_request</code>接口处理调用，同时这个类继承了一个专门负责网络连接的<code>TCPClient</code>类，该类提供了<code>connect</code>、<code>recv</code>、<code>send</code>和<code>close</code>接口管理网络连接。另外还提供了一个<code>_Method</code>类负责管理RPC的调用，相当于RPC stub，这种实现方式参考了xmlrpc。</li>
<li>服务端是实现了一个<code>Server</code>类，提供了<code>run</code>和<code>process</code>接口分别负责服务的启动和方法调用的处理，该类继承了两个类分别是<code>TCPServer</code>和<code>Dispatch</code>，其中<code>TCPServer</code>和<code>TCPClient</code>一样主要负责网络连接的处理，<code>Dispatch</code>类负责RPC方法的注册和调用，该类提供了<code>register_function</code>和<code>call_method</code>接口分别处理方法的注册和调用。</li>
</ul>
<img  
                     lazyload
                     alt="image"
                     data-src="/images/json_rpc.png"
                     
                >

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>客户端代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCPClient</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    负责网络连接</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self, host, port</span>):</span><br><span class="line">        self.sock.connect((host, port))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, length</span>):</span><br><span class="line">        <span class="keyword">return</span> self.sock.recv(length)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.sock.send(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        self.sock.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_Method</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    负责方法调用</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, send, name</span>):</span><br><span class="line">        self.__send = send</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">return</span> _Method(self.__send, <span class="string">f&quot;<span class="subst">&#123;self.__name&#125;</span>.<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__send(self.__name, args, kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServerProxy</span>(TCPClient, _Method):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">1060</span></span>):</span><br><span class="line">        TCPClient.__init__(self)</span><br><span class="line">        self.connect(host, port)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">return</span> _Method(self._request, name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_request</span>(<span class="params">self, method_name, args, kwargs</span>):</span><br><span class="line">        info = &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: method_name,</span><br><span class="line">            <span class="string">&#x27;args&#x27;</span>: args,</span><br><span class="line">            <span class="string">&#x27;kwargs&#x27;</span>: kwargs</span><br><span class="line">        &#125;</span><br><span class="line">        self.send(json.dumps(info).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        data = self.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">return</span> json.loads(data)[<span class="string">&#x27;result&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cli = ServerProxy(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">1061</span>)</span><br><span class="line"></span><br><span class="line">    ret = cli.ping()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;return of ping is: <span class="subst">&#123;ret&#125;</span>&quot;</span>)</span><br><span class="line">    ret = cli.add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;return of add(1, 2) is: <span class="subst">&#123;ret&#125;</span>&quot;</span>)</span><br><span class="line">    ret = cli.valid_method(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;return of valid_method is: <span class="subst">&#123;ret&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(dir(cli))</span></span><br></pre></td></tr></table></figure>
<p>服务端代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCPServer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    负责网络连接</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.conn = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">listen</span>(<span class="params">self, port</span>):</span><br><span class="line">        self.sock.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, port))</span><br><span class="line">        self.sock.listen(<span class="number">5</span>)</span><br><span class="line">        (conn, _) = self.sock.accept()</span><br><span class="line">        self.conn = conn</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self</span>):</span><br><span class="line">        msg = self.conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.conn.sendall(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dispatch</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    负责方法注册和调用</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.methods = &#123;&#125;</span><br><span class="line">        self.data = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">register_method</span>(<span class="params">self, method, name=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name:</span><br><span class="line">            name = method.__name__</span><br><span class="line">        self.methods[name] = method</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_method</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = json.loads(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        name = self.data[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        args = self.data[<span class="string">&#x27;args&#x27;</span>]</span><br><span class="line">        kwargs = self.data[<span class="string">&#x27;kwargs&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.methods:</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&quot;result&quot;</span>: <span class="string">f&quot;there is no support for <span class="subst">&#123;name&#125;</span>.&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret = self.methods[name](*args, **kwargs)</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&quot;result&quot;</span>: ret</span><br><span class="line">            &#125;</span><br><span class="line">        ret = json.dumps(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span>(TCPServer, Dispatch):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        TCPServer.__init__(self)</span><br><span class="line">        Dispatch.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, port</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Server listen at <span class="subst">&#123;port&#125;</span>.&quot;</span>)</span><br><span class="line">        self.listen(port)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;get connection&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = self.recv()</span><br><span class="line">            <span class="keyword">if</span> data:</span><br><span class="line">                ret = self.process(data)</span><br><span class="line">                self.send(ret)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> self.call_method(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  测试方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ping</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;pong&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    srv = Server()</span><br><span class="line">    srv.register_method(ping)</span><br><span class="line">    srv.register_method(Test.add)</span><br><span class="line">    srv.run(<span class="number">1061</span>)</span><br></pre></td></tr></table></figure>
<h3 id="测试方法及结果"><a href="#测试方法及结果" class="headerlink" title="测试方法及结果"></a>测试方法及结果</h3><p>调试方法：</p>
<ol>
<li>终端运行<code>server.py</code>文件，文件中提供了两个测试方法：普通的ping方法和类的静态方法add。</li>
<li>再开一个终端运行<code>client.py</code>文件，文件中提供了三个测试调用：调用普通方法、类的静态方法和一个不存在的方法。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 server.py</span><br><span class="line">python3 client.py</span><br></pre></td></tr></table></figure>
测试结果如下：<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">return of ping is: pong</span><br><span class="line">return of add(1, 2) is: 3</span><br><span class="line">return of valid_method is: there is no support for valid_method.</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="总结和展望"><a href="#总结和展望" class="headerlink" title="总结和展望"></a>总结和展望</h3><p>目前的RPC调用是一个只能处理一个连接的极简版本，主要是为了帮助我理解和学习RPC用的，通过代码可以发现这里RPC客户端最主要的地方是通过<code>__getattr__</code>重载将需要调用的方法的名字设为属性，同时作为参数构造一个<code>_Method</code>，然后重载<code>_Method</code>的<code>__call__</code>实现方法的调用。方法的调用过程就是将方法名字和参数通过json序列化后传给服务端以及将服务端返回来的结果反序列化后展示。服务端实现的原理就是通过函数注册将函数和函数名字进行绑定存在一个字典里，当收到客户端发来的调用就去字典里查看函数名字是否有对应的实现，如果有就执行该方法并返回，如果没有就返回提示。<br>这个代码未来可能会进一步完善，可以在完善的过程中通过解决问题加深对RPC以及网络编程的理解，后续想解决的问题有：</p>
<ol>
<li>通过多路复用实现多个连接</li>
<li>通过名字去创建<code>ServerProxy</code>对象，名字和对应的(ip, port)用一个配置文件来管理</li>
<li>目前是通过<code>json</code>协议实现RPC，可以考虑使用<code>protobuf</code>试试<br>等等，peace。</li>
</ol>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>python| 实现Facade装饰模式</title>
    <url>/2023/03/02/python-%E5%AE%9E%E7%8E%B0Facade%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">author: ribincao</span></span><br><span class="line"><span class="string">desc FacadeModel Demo</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># System</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Circle, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Draw Circle.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__int__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Rectangle, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Draw Rectangle.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Facade</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShapeFacade</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.circle = Circle()</span><br><span class="line">        self.rectangle = Rectangle()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">self</span>):</span><br><span class="line">        self.circle.draw()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_rectangle</span>(<span class="params">self</span>):</span><br><span class="line">        self.rectangle.draw()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sf = ShapeFacade()</span><br><span class="line">    sf.draw_circle()</span><br><span class="line">    sf.draw_rectangle()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>python| 实现Mediator中介者模式</title>
    <url>/2023/03/02/python-%E5%AE%9E%E7%8E%B0Mediator%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">author: ribincao</span></span><br><span class="line"><span class="string">desc: MediatorModel Demo</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self, string</span>):</span><br><span class="line">        ChatRoomMediator.say(self, string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatRoomMediator</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">user: User, msg: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;user.name&#125;</span>: <span class="subst">&#123;msg&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ribin = User(<span class="string">&quot;RibinCao&quot;</span>)</span><br><span class="line">    tommy = User(<span class="string">&quot;TommyLiu&quot;</span>)</span><br><span class="line">    ribin.say(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    tommy.say(<span class="string">&quot;hi&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>python| 实现Mix-in模式</title>
    <url>/2023/03/02/python-%E5%AE%9E%E7%8E%B0Mix-in%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Animal&quot;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> eat&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> sleep&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnimalMixin</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Mixin 类应该表示某种单一的功能且不依赖子类的实现, 子类没有 mixin 累也可已正常工作, 比如:</span></span><br><span class="line"><span class="string">        交通工具(基类) + 天上飞Mixin + 地上跑Mixin + 海里漂Mixin</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Animal Mixin&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_tools</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> make tools&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(Animal, AnimalMixin):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    AnimalMixin 的构造函数不会被调用</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        方法顺序解释(MRO): Person -&gt; Animal -&gt; AnimalMixin</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(Person, self).__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Person, self).make_tools()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Person(<span class="string">&quot;ribincao&quot;</span>)</span><br><span class="line">    p.eat()</span><br><span class="line">    p.sleep()</span><br><span class="line">    p.power()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>python| 实现代理模式</title>
    <url>/2023/03/02/python-%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">author: ribincao</span></span><br><span class="line"><span class="string">desc: ProxyModel Demo</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonImp</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">PersonImp</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">super</span>(Person, self).__init__()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span> say hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonProxy</span>(<span class="title class_ inherited__">PersonImp</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>(PersonProxy, self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line">        self._person = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._person:</span><br><span class="line">            self._person = Person(self.name)</span><br><span class="line">        self._person.hello()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pp = PersonProxy(<span class="string">&quot;ribincao&quot;</span>)</span><br><span class="line">    pp.hello()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>python| 实现单例模式的两种方式</title>
    <url>/2023/03/02/python-%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>第一种是通过类的方式，修改<code>__new__</code>实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(cls._instance, cls):</span><br><span class="line">            cls._instance = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S</span>(<span class="title class_ inherited__">Singleton</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>(S, self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">s</span>):</span><br><span class="line">    obj = S(s)</span><br><span class="line">    <span class="built_in">print</span>(obj.name, <span class="built_in">id</span>(obj))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        Thread(target=task, args=(<span class="built_in">str</span>(i), )).start()</span><br></pre></td></tr></table></figure>
<p>第二种是通过装饰器的方式实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">cls</span>):</span><br><span class="line">    _instance = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">instance</span>(<span class="params">*arg, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> _instance:</span><br><span class="line">            _instance[cls] = cls(*arg, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> _instance[cls]</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    obj = Test()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(obj))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        Thread(target=task).start()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>python| 实现发布-订阅模式</title>
    <url>/2023/03/02/python-%E5%AE%9E%E7%8E%B0%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">author: ribincao</span></span><br><span class="line"><span class="string">desc: SimpleEventDispatcherDemo</span></span><br><span class="line"><span class="string">Date: 2021/6/30</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span>, <span class="type">Type</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Event</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginEvent</span>(<span class="title class_ inherited__">Event</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LoginEvent, self).__init__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventDispatcher</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._listen = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_event</span>(<span class="params">self, event: <span class="built_in">type</span>, handler: <span class="type">Callable</span>[[Event], <span class="literal">None</span>]</span>):</span><br><span class="line">        <span class="comment"># print(&quot;add_event: &quot;, event.__name__)</span></span><br><span class="line">        event_name = event.__name__</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._has_listener(event_name, handler):</span><br><span class="line">            handlers = self._listen.get(event_name, [])</span><br><span class="line">            handlers.append(handler)</span><br><span class="line">            self._listen[event_name] = handlers</span><br><span class="line">            <span class="comment"># print(&quot;add listener success&quot;)</span></span><br><span class="line">            <span class="comment"># print(len(self._listen[event_name]))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_has_listener</span>(<span class="params">self, event_name: <span class="built_in">str</span>, handler: <span class="type">Callable</span>[[Event], <span class="literal">None</span>]</span>):</span><br><span class="line">        <span class="comment"># print(&quot;check handler: &quot;, event_name)</span></span><br><span class="line">        <span class="keyword">if</span> event_name <span class="keyword">in</span> self._listen:</span><br><span class="line">            <span class="keyword">return</span> handler <span class="keyword">in</span> self._listen[event_name]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch_event</span>(<span class="params">self, event: Event</span>):</span><br><span class="line">        <span class="comment"># print(&quot;dispatch_event: &quot;, event.__class__.__name__)</span></span><br><span class="line">        event_name = event.__class__.__name__</span><br><span class="line">        <span class="keyword">if</span> event_name <span class="keyword">in</span> self._listen:</span><br><span class="line">            handlers = self._listen[event_name]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">for</span> handler <span class="keyword">in</span> handlers:</span><br><span class="line">                    handler()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">                <span class="built_in">print</span>(error)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppMediator</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name: <span class="built_in">str</span>, event_dispatcher: EventDispatcher</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.event_dispatcher = event_dispatcher</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_event_listen</span>(<span class="params">self, event_clazz: <span class="type">Type</span>[Event], handler: <span class="type">Callable</span></span>):</span><br><span class="line">        self.event_dispatcher.add_event(event_clazz, handler)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch_event</span>(<span class="params">self, event: Event</span>):</span><br><span class="line">        self.event_dispatcher.dispatch_event(event)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span>(<span class="title class_ inherited__">AppMediator</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name: <span class="built_in">str</span>, event_dispatcher: EventDispatcher</span>):</span><br><span class="line">        <span class="built_in">super</span>(Entity, self).__init__(name, event_dispatcher)</span><br><span class="line">        self.add_event_listen(LoginEvent, self.hello)  <span class="comment"># 添加事件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> say hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_something</span>(<span class="params">self, event: Event</span>):</span><br><span class="line">        self.dispatch_event(event)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    eventDispatcher = EventDispatcher()</span><br><span class="line"></span><br><span class="line">    entity1 = Entity(<span class="string">&quot;ribincao&quot;</span>, eventDispatcher)</span><br><span class="line">    entity2 = Entity(<span class="string">&quot;tommyliu&quot;</span>, eventDispatcher)</span><br><span class="line">    entity3 = Entity(<span class="string">&quot;allyli&quot;</span>, eventDispatcher)</span><br><span class="line"></span><br><span class="line">    entity1.do_something(LoginEvent())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>python| 实现命令模式</title>
    <url>/2023/03/02/python-%E5%AE%9E%E7%8E%B0%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">author: ribincao</span></span><br><span class="line"><span class="string">desc: CommandModel Demo</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&quot;ribincao&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buy</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span> buy something.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> sell something.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BuyCommand</span>(<span class="title class_ inherited__">Command</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(BuyCommand, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self</span>):</span><br><span class="line">        self.buy()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SellCommand</span>(<span class="title class_ inherited__">Command</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(SellCommand, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self</span>):</span><br><span class="line">        self.sell()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommandMaker</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.commands: <span class="type">List</span>[Command] = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_command</span>(<span class="params">self, command: Command</span>):</span><br><span class="line">        self.commands.append(command)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.commands:</span><br><span class="line">            <span class="keyword">for</span> command <span class="keyword">in</span> self.commands:</span><br><span class="line">                command.execute()</span><br><span class="line">        self.commands.clear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cm = CommandMaker()</span><br><span class="line">    cm.add_command(SellCommand())</span><br><span class="line">    cm.add_command(BuyCommand())</span><br><span class="line">    <span class="comment"># print(len(cm.commands))</span></span><br><span class="line">    cm.execute()</span><br><span class="line">    <span class="comment"># print(len(cm.commands))</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>python| 实现工厂模式</title>
    <url>/2023/03/02/python-%E5%AE%9E%E7%8E%B0%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> SimpleFactory <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product1Factory</span>(<span class="title class_ inherited__">Factory</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Product1Factory, self).__init__()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_product</span>():</span><br><span class="line">        <span class="keyword">return</span> Product1()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product2Factory</span>(<span class="title class_ inherited__">Factory</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Product2Factory, self).__init__()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_product</span>():</span><br><span class="line">        <span class="keyword">return</span> Product2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pf = Product1Factory()</span><br><span class="line">    p = pf.create_product()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>python| 实现观察者模式</title>
    <url>/2023/03/02/python-%E5%AE%9E%E7%8E%B0%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">author: ribincao</span></span><br><span class="line"><span class="string">desc: ObserverModel Demo</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.hp = <span class="number">100</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.observers = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_notification</span>(<span class="params">self, hp</span>):</span><br><span class="line">        <span class="keyword">if</span> self.observers:</span><br><span class="line">            <span class="keyword">for</span> observer <span class="keyword">in</span> self.observers:</span><br><span class="line">                observer.update(hp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, user</span>):</span><br><span class="line">        self.user = user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HPObserver</span>(<span class="title class_ inherited__">Observer</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, user</span>):</span><br><span class="line">        <span class="built_in">super</span>(HPObserver, self).__init__(user)</span><br><span class="line">        self.user = user</span><br><span class="line">        self.user.attach(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, hp</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.user.name&#125;</span> be attacked, <span class="subst">&#123;hp&#125;</span> hp decreased.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>(<span class="title class_ inherited__">User</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>(Player, self).__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attach</span>(<span class="params">self, observer</span>):</span><br><span class="line">        self.observers.append(observer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">be_attack</span>(<span class="params">self, hp</span>):</span><br><span class="line">        self.hp -= hp</span><br><span class="line">        self.send_notification(hp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ribin = Player(<span class="string">&#x27;ribincao&#x27;</span>)</span><br><span class="line">    hpOb = HPObserver(ribin)</span><br><span class="line">    ribin.be_attack(<span class="number">50</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>python| 实现简单工厂模式</title>
    <url>/2023/03/02/python-%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product1</span>(<span class="title class_ inherited__">Product</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Product1, self).__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Product1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product2</span>(<span class="title class_ inherited__">Product</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Product2, self).__init__()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Product2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleFactory</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_product</span>(<span class="params">name: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[Product]:</span><br><span class="line">        <span class="keyword">if</span> name == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> Product1()</span><br><span class="line">        <span class="keyword">if</span> name == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> Product2()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sf = SimpleFactory()</span><br><span class="line">    p1 = sf.create_product(<span class="number">1</span>)</span><br><span class="line">    p2 = sf.create_product(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>python| 调用百度地图api查询经纬度</title>
    <url>/2023/03/02/python-%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEapi%E6%9F%A5%E8%AF%A2%E7%BB%8F%E7%BA%AC%E5%BA%A6/</url>
    <content><![CDATA[<p>最近在看《python网络编程》，里面的代码使用的案例是通过调用谷歌地图来查询经纬度，但是网络一直连不上，就用百度地图的api来实现书中的案例。<br>这里提到的查询经纬度按照调用层次可以有三种办法：第一种是构造url请求使用内置的request库去查询，实例代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造 url 获取查询响应</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">geocode</span>(<span class="params">address</span>):</span><br><span class="line">    paramters = &#123;<span class="string">&#x27;address&#x27;</span>: address, <span class="string">&#x27;output&#x27;</span>: <span class="string">&#x27;json&#x27;</span>&#125;</span><br><span class="line">    base = <span class="string">&#x27;http://api.map.baidu.com/geocoder&#x27;</span></span><br><span class="line">    response = requests.get(base, params=paramters)</span><br><span class="line">    answer = response.json()</span><br><span class="line">    <span class="built_in">print</span>(answer[<span class="string">&#x27;result&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    geocode(<span class="string">&#x27;景德镇市浮梁&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二种办法是使用更底层的内置http库在协议层面构造请求，实例代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.client</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote_plus</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base = <span class="string">&#x27;/geocoder&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接使用 http 协议</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">geocode</span>(<span class="params">address</span>):</span><br><span class="line">    path = <span class="string">f&#x27;<span class="subst">&#123;base&#125;</span>?address=<span class="subst">&#123;quote_plus(address)&#125;</span>&amp;output=json&#x27;</span></span><br><span class="line">    connection = http.client.HTTPConnection(<span class="string">&#x27;api.map.baidu.com&#x27;</span>)</span><br><span class="line">    connection.request(<span class="string">&#x27;GET&#x27;</span>, path)</span><br><span class="line">    rawreply = connection.getresponse().read()</span><br><span class="line">    reply = json.loads(rawreply.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(reply[<span class="string">&#x27;result&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    geocode(<span class="string">&#x27;景德镇市浮梁&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第三种办法是使用更加底层的socket库在传输层去创建会话获取经纬度，实例代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote_plus</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">request_txt = <span class="string">&quot;&quot;&quot;\</span></span><br><span class="line"><span class="string">GET /geocoder?address=&#123;&#125;&amp;output=json HTTP/1.1\r\n\</span></span><br><span class="line"><span class="string">Host: api.map.baidu.com:80\r\n\</span></span><br><span class="line"><span class="string">User-Agent: search4.py (Foundations of Python Network Programming)\r\n\</span></span><br><span class="line"><span class="string">Connection: close\r\n\</span></span><br><span class="line"><span class="string">\r\n</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立会话</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">geocode</span>(<span class="params">address</span>):</span><br><span class="line">    sock = socket.socket()</span><br><span class="line">    sock.connect((<span class="string">&#x27;api.map.baidu.com&#x27;</span>, <span class="number">80</span>))</span><br><span class="line">    request = request_txt.<span class="built_in">format</span>(quote_plus(address))</span><br><span class="line">    sock.sendall(request.encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">    raw_reply = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        more = sock.recv(<span class="number">4096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> more:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        raw_reply += more</span><br><span class="line">    <span class="built_in">print</span>(raw_reply.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    geocode(<span class="string">&#x27;景德镇市浮梁&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这边测试代码运行成功，最后一个代码返回的结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/javascript;charset=utf-8</span><br><span class="line">Date: Sat, 03 Jul 2021 07:22:49 GMT</span><br><span class="line">Http_x_bd_logid: xxx</span><br><span class="line">Http_x_bd_logid64: xx</span><br><span class="line">Http_x_bd_product: map</span><br><span class="line">Http_x_bd_subsys: apimap</span><br><span class="line">P3p: CP=&quot; OTI DSP COR IVA OUR IND COM &quot;</span><br><span class="line">Server: apache</span><br><span class="line">Content-Length: 210</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;status&quot;:&quot;OK&quot;,</span><br><span class="line">    &quot;result&quot;:&#123;</span><br><span class="line">        &quot;location&quot;:&#123;</span><br><span class="line">            &quot;lng&quot;:117.221466,</span><br><span class="line">            &quot;lat&quot;:29.357788</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;precise&quot;:0,</span><br><span class="line">        &quot;confidence&quot;:20,</span><br><span class="line">        &quot;level&quot;:&quot;\u533a\u53bf&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>shell| 一些好用的命令工具</title>
    <url>/2023/03/03/shell-%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>常年在macOS上开发已经习惯了用命令行了,所以有时间也会去倒腾一些有意思的命令替代工具,最近就发现了一些不错的替代命令,可以去github上搜一搜很多有意思的轮子</p>
<ul>
<li>替代ls的命令exa</li>
</ul>
<img  
                     lazyload
                     alt="image"
                     data-src="/images/exa.png"
                     
                >

<ul>
<li>替代du的命令dust</li>
</ul>
<img  
                     lazyload
                     alt="image"
                     data-src="/images/du.png"
                     
                >

<ul>
<li>替代df的命令duf</li>
</ul>
<img  
                     lazyload
                     alt="image"
                     data-src="/images/df.png"
                     
                >

<ul>
<li>替代grep的命令rg</li>
</ul>
<img  
                     lazyload
                     alt="image"
                     data-src="/images/cmdrg.png"
                     
                >

<ul>
<li>替代cat的命令bat</li>
</ul>
<img  
                     lazyload
                     alt="image"
                     data-src="/images/bat.png"
                     
                >
]]></content>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>tool| 发现一个很不错的vscode插件工具plantUML</title>
    <url>/2023/03/01/tool-umlPlant/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前每次写技术文档需要画图的时候都是通过飞书文档自带的工具或者processon去实现,实现的效果虽然勉强能看但是还是没有达到自己想要的效果,无意中在知乎上看到别人推荐,才是孤陋寡闻,在vscode里有对应的可视化插件plantUML和GraphvizPreview画出来的图是我想要的效果,需要用到对应的语言,准备这几天花点时间去琢磨一下.</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>简单基本使用了一下,可以用下面的代码看看效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Client -&gt; Server: EnterRoom</span><br><span class="line">Server -&gt; DB: GetRoomInfo</span><br><span class="line">DB -&gt; Server: RoomInfo</span><br><span class="line">Server -&gt; Client: success</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<p>琢磨中…</p>
]]></content>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>tool| 火焰图的使用</title>
    <url>/2023/03/02/tool-%E7%81%AB%E7%84%B0%E5%9B%BE%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>参考链接: <a class="link"   href="https://www.ruanyifeng.com/blog/2017/09/flame-graph.html" >https://www.ruanyifeng.com/blog/2017/09/flame-graph.html<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li>perf(performance)命令返回CPU正在执行的函数名及调用栈, 通常它的频率是99Hz(每秒统计99次)  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">record表示记录，-F 99表示每秒99次，-p 13204是进程号，-g表示记录调用栈，<span class="built_in">sleep</span> 30则是持续30秒</span></span><br><span class="line">sudo perf record -F 99 -p 13204 -g -- sleep 30</span><br></pre></td></tr></table></figure></li>
<li>火焰图是基于 perf 结果产生的 SVG 图片，用来展示 CPU 的调用栈<ul>
<li>y 轴表示调用栈，每一层都是一个函数。调用栈越深，火焰就越高，顶部就是正在执行的函数，下方都是它的父函数</li>
<li>x 轴表示抽样数，如果一个函数在 x 轴占据的宽度越宽，就表示它被抽到的次数多，即执行的时间长。注意，x 轴不代表时间，而是所有的调用栈合并后，按字母顺序排列的</li>
<li>火焰图就是看顶层的哪个函数占据的宽度最大。只要有”平顶”（plateaus），就表示该函数可能存在性能问题</li>
<li>调用栈: 底层函数调用上层函数, 也就是说真正在执行的是上层函数, 顶部函数宽度越宽说明抽样调查的时候大部分都在执行它, 也就是说执行时间长一些</li>
<li>局限情况<ul>
<li>调用栈不完整: 当调用栈过深时，某些系统只返回前面的一部分（比如前10层）</li>
<li>函数名缺失: 有些函数没有名字，编译器只用内存地址来表示（比如匿名函数）</li>
</ul>
</li>
</ul>
</li>
<li>火焰图生成工具: <a class="link"   href="https://github.com/brendangregg/FlameGraph" >https://github.com/brendangregg/FlameGraph<i class="fas fa-external-link-alt"></i></a>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install perf.x86_64</span><br><span class="line">git clone https://github.com/brendangregg/FlameGraph.git</span><br><span class="line">export PATH=xxx/FlameGraph:$PATH</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或<span class="built_in">cp</span> -r xxx/FlameGraph/* ~/bin/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">both user and kernel</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">perf record -F 99 -a -g -- <span class="built_in">sleep</span> 60</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">only pid = 12345</span></span><br><span class="line">sudo perf record -F 99 -p 12345 -g -- sleep 60</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">perf script &gt; out.perf</span></span><br><span class="line"></span><br><span class="line">perf script -i perf.data &amp;&gt; perf.unfold</span><br><span class="line">./stackcollapse-perf.pl perf.unfold &amp;&gt; perf.folded</span><br><span class="line">./flamegraph.pl perf.folded &gt; perf.svg</span><br></pre></td></tr></table></figure>
<ul>
<li>下载FlameGraph工具并添加环境变量 -&gt; perf record 生成记录 -&gt; perf script生成 unfold 文件 -&gt; stackcollapse-perf.pl生成 fold文件 -&gt; flamegraph.pl -&gt; 生成svg文件 -&gt; 浏览器打开perf.svg文件</li>
</ul>
</li>
</ul>
<p>一次测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/brendangregg/FlameGraph.git</span><br><span class="line">cd FlameGraph</span><br><span class="line"></span><br><span class="line">sudo perf record -F 99 -p 12345 -g -- sleep 60</span><br><span class="line">perf script -i perf.data &amp;&gt; perf.unfold</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里一定要注意是 stackcollapse-perf.pl , 不是其他的</span></span><br><span class="line">./stackcollapse-perf.pl perf.unfold &amp;&gt; perf.folded</span><br><span class="line">./flamegraph.pl perf.folded &gt; perf.svg</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>tool</tag>
        <tag>性能分析</tag>
      </tags>
  </entry>
  <entry>
    <title>unity| 实现物体的转动组合</title>
    <url>/2023/03/01/unity-rotate/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>策划需要实现一个道具旋转的功能,这个功能如果单纯在unity去实现本身并不是很难,比如有DOTween就可以,但是项目技术架构调整之后,物体的位置数据需要在服务端进行计算,然而服务端还有很多unity相关的基建没有提供支持,比如物理碰撞之类的.<br>所以为了实现需要的效果就需要自己去实现很多位置变化,这里策划的需求主要需要满足以下几点:</p>
<ol>
<li>物体的旋转轴支持配置,目前有三种分别是xyz三个轴</li>
<li>物体旋转到指定的角度后需要停止等待指定的时间</li>
<li>物体在旋转到停止的时候需要抖动一下模拟物理效果</li>
<li>效果参考超级马里奥</li>
</ol>
<img  
                     lazyload
                     alt="image"
                     data-src="/images/rotate_img.png"
                     
                >

<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>整个房子转动主要可以分为两部分，</p>
<ol>
<li>一部分是房子的转动部分，需要支持的配置为房子的转动轴(x|y|z)、转动速度<br>物体绕三个轴的转动目前在逻辑层的实现可以通过调用Transform的Rotate方法去实现<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">entity.transform.Rotate(<span class="keyword">new</span> Vector3(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>), angel, Space.World); <span class="comment">// 绕x轴旋转</span></span><br><span class="line">entity.transform.Rotate(<span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>), angel, Space.World); <span class="comment">// 绕y轴旋转</span></span><br><span class="line">entity.transform.Rotate(<span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>), angel, Space.World); <span class="comment">// 绕z轴旋转</span></span><br></pre></td></tr></table></figure>
旋转速度speed可以通过配置的方式平均到每个tick去计算旋转角angel</li>
<li>另一部分是房子转动状态的切换，房子的转动都是以90度为一个单元进行状态的切换<br>物体的旋转一般都是一个循环，旋转状态可以有三种：正转90度、停止、反转90度，然后按照需求去组合，最终会是一个循环链表，可以在地图重建的时候把这个循环链表一次性构建好用一个list去存储，之后就是按照链表循环去调用不同状态对应的旋转动作。</li>
<li>需要注意的是，每一次旋转停顿会有一个来回的扰动，这个扰动也可以单独抽出来做成一个函数用在每个状态结尾的时候执行，这个扰动可以通过让物体快速的来回旋转1度实现，通过调整度数和速度理论上可以达到效果<br>大概的状态流转如下，具体需要根据需求进行组合调整<img  
                     lazyload
                     alt="image"
                     data-src="/images/rotate_uml.png"
                     
                ></li>
</ol>
<h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>因为在家里的电脑unity跑起来比较费劲,就用python实现了一个伪代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line">DELTA_TIME = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">const = &#123;</span><br><span class="line">    <span class="string">&quot;house&quot;</span>: &#123;<span class="string">&quot;stop_time&quot;</span>: <span class="number">2</span>, <span class="string">&quot;shake_angel&quot;</span>: <span class="number">1</span>, <span class="string">&quot;angel&quot;</span>: <span class="number">90</span>, <span class="string">&quot;cycle_states&quot;</span>: [<span class="number">1</span>, <span class="number">0</span>]&#125;,</span><br><span class="line">    <span class="string">&quot;red&quot;</span>: &#123;<span class="string">&quot;stop_time&quot;</span>: <span class="number">4</span>, <span class="string">&quot;shake_angel&quot;</span>: <span class="number">0</span>, <span class="string">&quot;angel&quot;</span>: <span class="number">180</span>, <span class="string">&quot;cycle_states&quot;</span>: [<span class="number">1</span>, <span class="number">0</span>]&#125;,</span><br><span class="line">    <span class="string">&quot;blue&quot;</span>: &#123;<span class="string">&quot;stop_time&quot;</span>: <span class="number">4</span>, <span class="string">&quot;shake_angel&quot;</span>: <span class="number">0</span>, <span class="string">&quot;angel&quot;</span>: <span class="number">180</span>, <span class="string">&quot;cycle_states&quot;</span>: [<span class="number">0</span>, <span class="number">1</span>]&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, item_id: <span class="built_in">str</span>, speed: <span class="built_in">int</span>, axis: <span class="built_in">int</span></span>):</span><br><span class="line">        self.item_id: <span class="built_in">str</span> = item_id</span><br><span class="line">        self.speed: <span class="built_in">int</span> = speed</span><br><span class="line">        self.axis: <span class="built_in">int</span> = axis</span><br><span class="line"></span><br><span class="line">        self.cur_rotate: <span class="built_in">int</span> = <span class="number">0</span></span><br><span class="line">        self.angel: <span class="built_in">int</span> = <span class="number">90</span></span><br><span class="line">        self.stop_time: <span class="built_in">int</span> = <span class="number">2</span>  <span class="comment"># second</span></span><br><span class="line">        self.cycle_states: <span class="type">List</span>[<span class="built_in">int</span>] = []</span><br><span class="line">        self.cur_state_index: <span class="built_in">int</span> = <span class="number">0</span></span><br><span class="line">        self.cur_stop_time: <span class="built_in">int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.shake_angel: <span class="built_in">int</span> = <span class="number">1</span>  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rebuild</span>(<span class="params">self</span>):</span><br><span class="line">        config = const.get(self.item_id)</span><br><span class="line">        self.angel: <span class="built_in">int</span> = config.get(<span class="string">&quot;angel&quot;</span>, <span class="number">90</span>)</span><br><span class="line">        self.stop_time: <span class="built_in">int</span> = config.get(<span class="string">&quot;stop_time&quot;</span>, <span class="number">2</span>)</span><br><span class="line">        self.shake_angel: <span class="built_in">int</span> = config.get(<span class="string">&quot;shake_angel&quot;</span>, <span class="number">0</span>)</span><br><span class="line">        self.cycle_states: <span class="type">List</span>[<span class="built_in">int</span>] = config.get(<span class="string">&quot;cycle_states&quot;</span>, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">positive_rotate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 正向旋转</span></span><br><span class="line">        tick_angel = (self.angel * DELTA_TIME / self.speed)</span><br><span class="line">        self.cur_rotate += tick_angel</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.cur_rotate % self.angel == <span class="number">0</span>:</span><br><span class="line">            self.cur_state_index = (self.cur_state_index + <span class="number">1</span>) % <span class="built_in">len</span>(self.cycle_states)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;positive rotate <span class="subst">&#123;self.item_id&#125;</span> <span class="subst">&#123;self.cur_rotate&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">negative_rotate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 反向旋转</span></span><br><span class="line">        tick_angel = (self.angel * DELTA_TIME / self.speed)</span><br><span class="line">        self.cur_rotate -= tick_angel</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.cur_rotate % self.angel == <span class="number">0</span>:</span><br><span class="line">            self.cur_state_index = (self.cur_state_index + <span class="number">1</span>) % <span class="built_in">len</span>(self.cycle_states)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;negative rotate <span class="subst">&#123;self.item_id&#125;</span> <span class="subst">&#123;self.cur_rotate&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 停止</span></span><br><span class="line">        self.cur_stop_time += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.cur_stop_time == self.stop_time:</span><br><span class="line">            self.cur_state_index = (self.cur_state_index + <span class="number">1</span>) % <span class="built_in">len</span>(self.cycle_states)</span><br><span class="line">            self.cur_stop_time = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;stop <span class="subst">&#123;self.item_id&#125;</span> <span class="subst">&#123;self.cur_rotate&#125;</span> <span class="subst">&#123;self.cur_stop_time&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shake</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 扰动</span></span><br><span class="line">        <span class="keyword">if</span> self.shake_angel == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        state = self.cycle_states[self.cur_state_index]</span><br><span class="line"></span><br><span class="line">        self.shake()</span><br><span class="line">        <span class="keyword">if</span> state == <span class="number">1</span>:</span><br><span class="line">            self.positive_rotate()</span><br><span class="line">        <span class="keyword">elif</span> state == -<span class="number">1</span>:</span><br><span class="line">            self.negative_rotate()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.stop()</span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_test2</span>():</span><br><span class="line">    r = Item(<span class="string">&quot;red&quot;</span>, <span class="number">4</span>, <span class="number">0</span>) <span class="comment"># 红色地板</span></span><br><span class="line">    r.rebuild() <span class="comment"># 场景重建</span></span><br><span class="line">    </span><br><span class="line">    b = Item(<span class="string">&quot;blue&quot;</span>, <span class="number">4</span>, <span class="number">0</span>) <span class="comment"># 蓝色地板</span></span><br><span class="line">    b.rebuild()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r.update()</span><br><span class="line">        b.update()</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        time.sleep(DELTA_TIME) <span class="comment"># 帧率</span></span><br></pre></td></tr></table></figure>

<h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C#实现"></a>C#实现</h2><p>在公司里基于项目的ECS架构测试了一下,大概的测试代码如下,从表现来看达到了想要的效果</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> DELTA = (<span class="number">1000</span> / NetworkDefine.UPDATE_DELTATIME);  <span class="comment">// 1s中多少帧</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> ANGEL = <span class="number">180f</span>;       <span class="comment">//  每次停止前需要旋转的角度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> SPEED = <span class="number">2</span>;          <span class="comment">// 旋转速度 2秒转完 ANGEL</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> STOP_TIME_TICK = <span class="number">1</span> * (<span class="built_in">int</span>)DELTA;  <span class="comment">// 停下的时候等待时间为 1s</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> AXIS = <span class="number">2</span>;     <span class="comment">// 绕轴 0-x,1-y,2-z</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> curStopTick = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> curAngel = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> List&lt;<span class="built_in">int</span>&gt; states = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;() &#123; <span class="number">1</span>, <span class="number">999</span>, <span class="number">0</span>, <span class="number">999</span> &#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> curStateIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> MAX_SHAKE_TIMES = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> curShakeIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> shakeAngel = <span class="number">1.33f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Vector3 <span class="title">GetAxis</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (AXIS == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (AXIS == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Shake</span>(<span class="params">GameLogicEntity entity</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> angel = (ANGEL / (SPEED * DELTA * <span class="number">5</span>));  <span class="comment">// 5是调整系数</span></span><br><span class="line">    <span class="keyword">if</span> (curShakeIndex % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        entity.transform.Rotate(GetAxis(), angel, Space.World);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        entity.transform.Rotate(GetAxis(), -angel, Space.World);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curShakeIndex++;</span><br><span class="line">    <span class="keyword">if</span> (curShakeIndex &gt;= MAX_SHAKE_TIMES)</span><br><span class="line">    &#123;</span><br><span class="line">        curShakeIndex = <span class="number">0</span>;</span><br><span class="line">        curStateIndex = (curStateIndex + <span class="number">1</span>) % states.Count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Positive</span>(<span class="params">GameLogicEntity entity</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> angel = (ANGEL / (SPEED * DELTA));</span><br><span class="line">    curAngel += angel;</span><br><span class="line">    entity.transform.Rotate(GetAxis(), angel, Space.World);</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">int</span>)curAngel % ANGEL &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        curStateIndex = (curStateIndex + <span class="number">1</span>) % states.Count;</span><br><span class="line">        curAngel %= ANGEL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Negative</span>(<span class="params">GameLogicEntity entity</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> angel = (ANGEL / (SPEED * DELTA));</span><br><span class="line">    curAngel += angel;</span><br><span class="line">    entity.transform.Rotate(GetAxis(), -angel, Space.World);</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">int</span>)curAngel % ANGEL &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        curStateIndex = (curStateIndex + <span class="number">1</span>) % states.Count;</span><br><span class="line">        curAngel %= ANGEL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Stop</span>(<span class="params">GameLogicEntity entity</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    curStopTick++;</span><br><span class="line">    <span class="keyword">if</span> (curStopTick == STOP_TIME_TICK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> nextIndex = (curStateIndex + <span class="number">1</span>) % states.Count;</span><br><span class="line">        curStateIndex = nextIndex;</span><br><span class="line">        curStopTick = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> entity <span class="keyword">in</span> <span class="keyword">this</span>.slidePipeGroup)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (entity.slidePipeLogic.mState == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> state = states[curStateIndex];</span><br><span class="line">        <span class="keyword">if</span> (state == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Positive(entity);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Negative(entity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(state == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Stop(entity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Shake(entity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>公司的项目技术架构是基于ECS开发的,这段代码如果要放到unity里去运行还是需要转换一下的,但是整体思路就是把物体的旋转变化用状态机去实现</li>
<li>物体的扰动通过来回旋转一个小角度可以实现</li>
<li>很多时候封装好的组件可以实现我们想要的效果,好处是足够专业,不太方便的是不够灵活,工作中有时间的话,尤其是没有轮子用的时候还是要去了解一些组件的实现用原理尝试着去造一下,也许效果没有那么专业,但至少在造的过程中知道可能出现的问题以及相对应的解决办法,对自己也是一种提升.</li>
</ol>
]]></content>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>unity| 实现物体的滚动效果</title>
    <url>/2023/03/03/unity-%E5%AE%9E%E7%8E%B0%E7%89%A9%E4%BD%93%E7%9A%84%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>最近接到一个需求需要实现一个给圆柱体推力让它滚动的效果,目前遇到的问题是运动逻辑是在服务器实现,而服务器的引擎方面的基建还差很多,没办法像unity那样实现比较逼真.<br>所以我就用unity去实现一个简单滚动效果的demo,unity开启一个3D的新工程,创建一个圆柱体,然后把旋转角的Z轴设置为90度让它躺下,position坐标设置为原点(0, 0, 0),给圆柱体添加刚体rigibody组件,然后绑定如下脚本</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestRotate</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>] <span class="keyword">public</span> <span class="built_in">float</span> force;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        force = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MovePosition</span>(<span class="params">Transform transform, Vector3 delta</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> pos = <span class="keyword">new</span> Vector3(transform.position.x + delta.x, transform.position.y + delta.y, transform.position.z + delta.z);</span><br><span class="line">        transform.position = pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MoveRotate</span>(<span class="params">Transform transform, Vector3 axis, <span class="built_in">float</span> angel</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        transform.Rotate(axis, angel, Space.Self);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RotateDemo</span>(<span class="params">Transform transform, <span class="built_in">int</span> type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">0</span>) <span class="comment">// 前滚</span></span><br><span class="line">        &#123;</span><br><span class="line">            MoveRotate(transform, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>), -force / <span class="number">1000</span>);</span><br><span class="line">            MovePosition(transform, <span class="keyword">new</span> Vector3(<span class="number">0f</span>, <span class="number">0f</span>, force / <span class="number">10000</span>));</span><br><span class="line">            force -= <span class="number">1f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 后滚</span></span><br><span class="line">        &#123;</span><br><span class="line">            MoveRotate(transform, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>), -force / <span class="number">1000</span>);</span><br><span class="line">            MovePosition(transform, <span class="keyword">new</span> Vector3(<span class="number">0f</span>, <span class="number">0f</span>, force / <span class="number">10000</span>));</span><br><span class="line">            force += <span class="number">1f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ListenKey</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKey(KeyCode.O))</span><br><span class="line">        &#123;</span><br><span class="line">            force = <span class="number">-1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Input.GetKey(KeyCode.P))</span><br><span class="line">        &#123;</span><br><span class="line">            force = <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ListenKey();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (force == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (force &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            RotateDemo(transform, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RotateDemo(transform, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>按下P键和O键可以给物体一个正向&#x2F;反向的推力让它滚动,如果需要滚动效果更真实一点的话需要计算好滚动的角度和位置移动偏差的关系.</p>
<p>如果在读武器需要沿着地面进行滚动的话,要么需要服务器支持给物体添加刚体效果,或者手动给物体持续施加一个向下的拉力达到重力效果.</p>
]]></content>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>vim| nvimdots的使用和配置</title>
    <url>/2023/03/03/vim-nvimdots%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>nvimdots的github仓库地址：<a class="link"   href="https://github.com/ayamir/nvimdots" >https://github.com/ayamir/nvimdots<i class="fas fa-external-link-alt"></i></a></p>
<p>按照说明的命令安装,因为我是macos,所以执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if command -v curl &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">    bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ayamir/nvimdots/HEAD/scripts/install.sh)&quot;</span><br><span class="line">else</span><br><span class="line">    bash -c &quot;$(wget -O- https://raw.githubusercontent.com/ayamir/nvimdots/HEAD/scripts/install.sh)&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>安装成功后，我想修改终端的颜色配置，找了半天发现在~&#x2F;.config&#x2F;nvim&#x2F;lua&#x2F;core&#x2F;settings.lua文件里进行修改,我按照自己喜欢的风格暂时修改了colorscheme为edge风格,background为light,后面有时间再重新配置一下颜色</p>
<p>我发现它默认是设置里相对行号的,我不太习惯这种风格找了一下配置，只要在~&#x2F;.config&#x2F;nvim&#x2F;lua&#x2F;core&#x2F;option.lua里修改relativenumber为false就行了,其他的基本配置也在这里面,摸索一下</p>
<p>简单的配置之后效果如图</p>
<img  
                     lazyload
                     alt="image"
                     data-src="/images/nvimdots.png"
                     
                >

<p>在使用的过程中不知道快捷键怎么用可以在命令模式用Ctrl+p弹出help,比如我想看文件树,就在里面搜索file</p>
<img  
                     lazyload
                     alt="image"
                     data-src="/images/nvimdotsfile1.png"
                     
                >

<p>图片里显示C-N(Ctrl+N)可以显示或者关闭文件树，试一下显示效果如图</p>
<img  
                     lazyload
                     alt="image"
                     data-src="/images/nvimdotsfile2.png"
                     
                >


<p>PS: 搭配wezterm终端或者kitty终端食用效果更佳</p>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>vim| vim基本配置</title>
    <url>/2023/02/28/vim-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>工作中无论是终端还是IDE都是习惯用vim进行代码编辑, 每次到新公司或者换电脑都得去配置一下, 虽然我基本不用插件,但是一些基本的配置改好之后界面会看着舒服很多.<br>为了怕自己忘记一些基本的配置,这边存一下vim的基本配置, 方便切换电脑的时候能快速把编辑环境配置好.</p>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;set termguicolors  &quot;</span> 打开 <span class="number">24</span> 位真彩色支持                     </span><br><span class="line"><span class="string">&quot;set colorcolumn=80  &quot;</span> 高亮第<span class="number">80</span>列                          </span><br><span class="line"><span class="string">&quot;set relativenumber                    &quot;</span> setting <span class="built_in">line</span> in relative <span class="keyword">mode</span></span><br><span class="line"><span class="comment">&quot;highlight CursorColumn cterm=NONE ctermbg=gray ctermfg=yellow guibg=NONE guifg=NONE </span></span><br><span class="line"><span class="comment">&quot;highlight CursorLine  cterm=NONE ctermbg=gray ctermfg=yellow guibg=NONE guifg=NONE </span></span><br><span class="line"><span class="comment">&quot;set colorcolumn=100                                 </span></span><br><span class="line"><span class="keyword">set</span> cursorcolumn   <span class="comment">&quot; 高亮显示当前列                        </span></span><br><span class="line"><span class="keyword">set</span> cursorline    <span class="comment">&quot; 高亮显示当前行                        </span></span><br><span class="line"><span class="keyword">set</span> ignorecase    <span class="comment">&quot; 搜索的时候忽略大小字字母                   </span></span><br><span class="line"><span class="keyword">set</span> smartcase     <span class="comment">&quot; 若搜索内容中有大写字母，则不再忽略大小写           </span></span><br><span class="line"><span class="keyword">set</span> exrc                         <span class="comment">&quot; exec command in init.vim </span></span><br><span class="line"><span class="keyword">set</span> secure                        <span class="comment">&quot; safely do command above  </span></span><br><span class="line"><span class="keyword">set</span> autochdir                       <span class="comment">&quot; auto change directory   </span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span>                        <span class="comment">&quot; setting line       </span></span><br><span class="line"><span class="keyword">set</span> noexpandtab                      <span class="comment">&quot; use only &#x27;\t&#x27; as tab   </span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span>                       <span class="comment">&quot; show how many space for a &#x27;\t&#x27;</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">2</span>                     <span class="comment">&quot; use how many space for &gt;&gt; or &lt;&lt; key</span></span><br><span class="line"><span class="keyword">set</span> softtabstop=<span class="number">2</span>                     <span class="comment">&quot; use how many space when pressing tab</span></span><br><span class="line"><span class="keyword">set</span> autoindent                                    </span><br><span class="line"><span class="keyword">set</span> <span class="keyword">list</span>                         <span class="comment">&quot; show hiding char     </span></span><br><span class="line"><span class="keyword">set</span> listchars=<span class="keyword">tab</span>:\|\ ,trail:·              <span class="comment">&quot; define tab and space show</span></span><br><span class="line"><span class="keyword">set</span> scrolloff=<span class="number">4</span>                      <span class="comment">&quot; least amount line below and above the cursor</span></span><br><span class="line"><span class="keyword">set</span> ttimeoutlen=<span class="number">0</span>                     <span class="comment">&quot; set never wait for key  </span></span><br><span class="line"><span class="keyword">set</span> notimeout                                     </span><br><span class="line"><span class="keyword">set</span> viewoptions=<span class="built_in">cursor</span>,folds,slash,unix          <span class="comment">&quot; remember where to recover cursor</span></span><br><span class="line"><span class="keyword">set</span> wrap                         <span class="comment">&quot; auto line feed      </span></span><br><span class="line"><span class="keyword">set</span> tw=<span class="number">0</span>                         <span class="comment">&quot; text width for automatically wrapping</span></span><br><span class="line"><span class="keyword">set</span> indentexpr=                                                                                                          </span><br><span class="line"><span class="keyword">set</span> splitright                                    </span><br><span class="line"><span class="keyword">set</span> splitbelow                                    </span><br><span class="line"><span class="keyword">set</span> noshowmode                      <span class="comment">&quot; not showing current mode</span></span><br><span class="line"><span class="keyword">set</span> showcmd                        <span class="comment">&quot; show cmd inputing like key combine</span></span><br><span class="line"><span class="keyword">set</span> wildmenu                       <span class="comment">&quot; auto finish vim command  </span></span><br><span class="line"><span class="keyword">set</span> ignorecase                      <span class="comment">&quot; ignore case when searching</span></span><br><span class="line"><span class="keyword">set</span> smartcase                       <span class="comment">&quot; ignore case only on searching</span></span><br><span class="line"><span class="keyword">set</span> shortmess+=<span class="keyword">c</span>                     <span class="comment">&quot; don&#x27;t show useless msg  </span></span><br><span class="line"><span class="keyword">set</span> inccommand=<span class="keyword">split</span>                   <span class="comment">&quot; show substitution automatically</span></span><br><span class="line"><span class="keyword">set</span> completeopt=longest,noinsert,menuone,noselect,preview <span class="comment">&quot; complete opject with a menue</span></span><br><span class="line"><span class="keyword">set</span> ttyfast                        <span class="comment">&quot; make scrolling faster   </span></span><br><span class="line"><span class="keyword">set</span> visualbell                      <span class="comment">&quot; flash screen to notify error</span></span><br><span class="line"><span class="keyword">set</span> updatetime=<span class="number">100</span>                                  </span><br><span class="line"><span class="keyword">set</span> virtualedit=block                                 </span><br><span class="line"><span class="keyword">set</span> lazyredraw                                    </span><br><span class="line"><span class="keyword">set</span> re=<span class="number">0</span>                         <span class="comment">&quot;make increase speed    </span></span><br><span class="line"><span class="comment">&quot; set folding paragraph                                </span></span><br><span class="line"><span class="keyword">set</span> foldmethod=<span class="built_in">indent</span>                                 </span><br><span class="line"><span class="keyword">set</span> <span class="built_in">foldlevel</span>=<span class="number">99</span>                                   </span><br><span class="line"><span class="keyword">set</span> foldenable                                    </span><br><span class="line"><span class="keyword">set</span> formatoptions-=<span class="keyword">tc</span>                                 </span><br><span class="line"><span class="comment">&quot; keep undo or temp file                               </span></span><br><span class="line"><span class="keyword">set</span> hidden                                     </span><br></pre></td></tr></table></figure>

<h2 id="neovim"><a href="#neovim" class="headerlink" title="neovim"></a>neovim</h2><p>不过有时间的话一般都是配置neovim,我的neovim配置仓库是: <a class="link"   href="https://github.com/ribincao/ribin-neovim.git" >https://github.com/ribincao/ribin-neovim.git<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>(一)技术方案设计</title>
    <url>/2023/03/01/%E4%B8%80-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>todo…</p>
]]></content>
      <categories>
        <category>python从零到一搭建游戏服务器</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式基本原则</title>
    <url>/2023/03/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h1 id="DesignPatternByPython"><a href="#DesignPatternByPython" class="headerlink" title="DesignPatternByPython"></a>DesignPatternByPython</h1><h2 id="设计问题"><a href="#设计问题" class="headerlink" title="设计问题"></a>设计问题</h2><ol>
<li>僵化性：很难对系统进行改动，因为每个改动都会迫使许多对系统其他部分的改动</li>
<li>脆弱性：对系统的改动会导致系统中和改动的地方在概念无关的许多地方出现问题</li>
<li>牢固性：使之成为一些可在其他系统中重用的组件</li>
<li>粘滞性：做正确的事情比做错误的事情要困难</li>
<li>不必要的复杂性：设计中包含不具有任何好处的基础结构</li>
<li>不必要的重复：设计中包含有重复结构，而该重复结构本可以使用单一的抽象进行统一</li>
<li>晦涩性：很难阅读、理解，没有很好的表现出意图</li>
</ol>
<h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ol>
<li><p>单一职责原则<code>SRP</code>：就一个类而言，应该仅有一个引起它变化的原因</p>
<ul>
<li>职责指的是“变化的原因”</li>
</ul>
</li>
<li><p>开放封闭原则<code>OCP</code>：软件实体（类、模块、函数等）应该是可以扩展的，但是不可修改的。</p>
<ul>
<li><p><strong>封闭是建立在抽象和多态的基础之上的</strong></p>
</li>
<li><p>对扩展开发，对接口关闭</p>
</li>
<li><p>无论模块多么封闭，都会存在一些无法对之封闭的变化</p>
</li>
<li><p>在我们认为可能发生变化的地方hook</p>
</li>
</ul>
</li>
<li><p><code>Liskov</code>替换原则<code>LSP</code>：子类型必须能够替换他们的基类型</p>
<ul>
<li>派生类的is-a关系是基于行为判断的</li>
</ul>
</li>
<li><p>依赖倒置原则<code>DIP</code>：上层模块 -&gt; 抽象 -&gt; 下层模块</p>
<ul>
<li>上层模块不应该依赖底层模块，它们都应该依赖于抽象</li>
<li>抽象不应该依赖于细节，细节应该依赖于抽象</li>
<li>原则<ul>
<li>任何变量都不应该持有一个指向具体类的指针或者引用</li>
<li>任何类都不应该从具体类派生</li>
<li>任何方法都不应该覆写它的任何基类中的已经实现了的方法</li>
</ul>
</li>
</ul>
</li>
<li><p>接口隔离原则<code>ISP</code>：不应该强迫客户依赖于它们不用的方法</p>
<ul>
<li>使用多个专门的接口比使用单个接口要好很多</li>
</ul>
</li>
<li><p>迪米特法则(最少知识原则)：一个类对于其他类知道的越少越好</p>
</li>
</ol>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h3><ul>
<li>代理模式：为其他对象提供一种代理以控制对这个对象的访问，在直接访问对象时带来的问题</li>
<li>外观模式：隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口</li>
</ul>
<h3 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h3><ul>
<li>中介者模式：降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信</li>
<li>观察者模式：对象间存在一对多关系时，当一个对象被修改时会自动通知依赖它的对象</li>
<li>命令模式：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化</li>
</ul>
<h3 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h3><ul>
<li>单例模式：类负责创建自己的对象，同时确保只有单个对象被创建</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
</search>
